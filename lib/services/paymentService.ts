import Stripe from 'stripe'

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞
let stripe: Stripe | null = null

try {
  if (process.env.STRIPE_SECRET_KEY) {
    stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
      apiVersion: '2025-07-30.basil',
      typescript: true
    })
  }
} catch (error) {
  console.warn('‚ö†Ô∏è Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRIPE_SECRET_KEY')
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface CreatePaymentIntentParams {
  amount: number // –í –¥–æ–ª–ª–∞—Ä–∞—Ö (–±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ü–µ–Ω—Ç—ã)
  productType: string
  userId: string
  description?: string
}

interface PaymentResult {
  client_secret: string
  payment_intent_id: string
  amount: number
  currency: string
}

/**
 * –°–æ–∑–¥–∞–µ—Ç Payment Intent –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –º–∞—Å–∫–æ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
 * @returns client_secret –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 */
export async function createPaymentIntent(params: CreatePaymentIntentParams): Promise<PaymentResult> {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Stripe
    if (!stripe) {
      throw new Error('Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STRIPE_SECRET_KEY.')
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!params.amount || params.amount <= 0) {
      throw new Error('Amount must be greater than 0')
    }
    
    if (!params.userId) {
      throw new Error('User ID is required')
    }
    
    if (!params.productType) {
      throw new Error('Product type is required')
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    const descriptions: Record<string, string> = {
      'token_limit': `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤`,
      'mascot': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞',
      'premium_model': '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º AI –º–æ–¥–µ–ª—è–º',
      'premium_subscription': '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ Arcanum Platform'
    }
    
    const description = params.description || descriptions[params.productType] || '–ü–æ–∫—É–ø–∫–∞ –≤ Arcanum Platform'
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Payment Intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(params.amount * 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
      currency: 'usd',
      description: description,
      metadata: {
        user_id: params.userId,
        product_type: params.productType,
        platform: 'arcanum',
        created_at: new Date().toISOString()
      },
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      confirmation_method: 'automatic',
      // –ú–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–∞
      payment_method_types: ['card'],
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      setup_future_usage: 'off_session' // –î–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã
    })
    
    console.log(`üí≥ Payment Intent —Å–æ–∑–¥–∞–Ω: ${paymentIntent.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${params.userId}`)
    
    return {
      client_secret: paymentIntent.client_secret!,
      payment_intent_id: paymentIntent.id,
      amount: paymentIntent.amount,
      currency: paymentIntent.currency
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Payment Intent:', error)
    
    if (error instanceof Stripe.errors.StripeError) {
      throw new Error(`Stripe error: ${error.message}`)
    }
    
    throw new Error(`Payment creation failed: ${error.message || error}`)
  }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
 * @param paymentIntentId ID –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
export async function confirmPayment(paymentIntentId: string): Promise<{
  status: string
  amount: number
  currency: string
  metadata: Stripe.MetadataParam
}> {
  try {
    if (!stripe) {
      throw new Error('Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STRIPE_SECRET_KEY.')
    }
    
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId)
    
    if (paymentIntent.status === 'succeeded') {
      console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${paymentIntentId}`)
      
      return {
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        metadata: paymentIntent.metadata
      }
    } else {
      throw new Error(`Payment not completed. Status: ${paymentIntent.status}`)
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error)
    throw new Error(`Payment confirmation failed: ${error.message || error}`)
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
 * @returns –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserPayments(userId: string, limit: number = 10): Promise<Stripe.PaymentIntent[]> {
  try {
    if (!stripe) {
      throw new Error('Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STRIPE_SECRET_KEY.')
    }
    
    const paymentIntents = await stripe.paymentIntents.list({
      limit: limit,
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expand: ['data.payment_method']
    })
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const userPayments = paymentIntents.data.filter(
      payment => payment.metadata.user_id === userId
    )
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
    
    return userPayments
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    throw new Error(`Failed to get user payments: ${error.message || error}`)
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
 * @param paymentIntentId ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
 * @param amount –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç)
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
 * @returns –î–µ—Ç–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
export async function createRefund(
  paymentIntentId: string, 
  amount?: number, 
  reason?: string
): Promise<Stripe.Refund> {
  try {
    if (!stripe) {
      throw new Error('Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STRIPE_SECRET_KEY.')
    }
    
    const refund = await stripe.refunds.create({
      payment_intent: paymentIntentId,
      amount: amount, // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
      reason: reason as Stripe.RefundCreateParams.Reason || 'requested_by_customer',
      metadata: {
        refund_date: new Date().toISOString(),
        platform: 'arcanum'
      }
    })
    
    console.log(`üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω: ${refund.id} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentIntentId}`)
    
    return refund
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', error)
    throw new Error(`Refund creation failed: ${error.message || error}`)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Stripe API –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
 * @returns –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stripe
 */
export async function checkStripeHealth(): Promise<{
  isHealthy: boolean
  accountId?: string
  error?: string
}> {
  try {
    if (!stripe) {
      return {
        isHealthy: false,
        error: 'Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STRIPE_SECRET_KEY.'
      }
    }
    
    const account = await stripe.accounts.retrieve()
    
    return {
      isHealthy: true,
      accountId: account.id
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stripe:', error)
    
    return {
      isHealthy: false,
      error: error.message || 'Unknown Stripe error'
    }
  }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
export const PRODUCT_PRICES = {
  TOKEN_PACKAGE_SMALL: 2.00,    // 2000 —Ç–æ–∫–µ–Ω–æ–≤
  TOKEN_PACKAGE_MEDIUM: 5.00,   // 5000 —Ç–æ–∫–µ–Ω–æ–≤  
  TOKEN_PACKAGE_LARGE: 10.00,   // 12000 —Ç–æ–∫–µ–Ω–æ–≤
  MASCOT_GENERATION: 1.00,      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 1 –º–∞—Å–∫–æ—Ç–∞
  PREMIUM_MODEL_ACCESS: 0.50,   // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ –Ω–∞ 1 —á–∞—Å
  PREMIUM_SUBSCRIPTION: 9.99    // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
} as const

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { CreatePaymentIntentParams, PaymentResult } 