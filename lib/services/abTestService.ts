// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è Arcanum Platform
// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏

import { createClient } from '../supabase/client'

// –¢–∏–ø—ã A/B —Ç–µ—Å—Ç–æ–≤
export type ABTestType = 'token_limit' | 'mascot' | 'premium_subscription'

// –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export interface PriceVariant {
  id: string
  multiplier: number // 1.0 = –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞, 1.5 = +50%, 0.75 = -25%
  label: string
  description: string
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç A/B —Ç–µ—Å—Ç–∞
export interface ABTestResult {
  userId: string
  testType: ABTestType
  variantId: string
  basePrice: number
  testPrice: number
  multiplier: number
  timestamp: Date
}

// –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
export interface ConversionMetrics {
  testType: ABTestType
  variantId: string
  impressions: number // –ü–æ–∫–∞–∑—ã paywall
  clicks: number      // –ö–ª–∏–∫–∏ "–ö—É–ø–∏—Ç—å"
  conversions: number // –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
  revenue: number     // –û–±—â–∏–π –¥–æ—Ö–æ–¥
  conversionRate: number // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  averageOrderValue: number // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const PRICE_VARIANTS: Record<string, PriceVariant[]> = {
  'token_limit': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' },
    { id: 'premium_20', multiplier: 1.2, label: '–ü—Ä–µ–º–∏—É–º +20%', description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
    { id: 'discount_25', multiplier: 0.75, label: '–°–∫–∏–¥–∫–∞ -25%', description: '–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
    { id: 'psychological', multiplier: 0.99, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$1.99 –≤–º–µ—Å—Ç–æ $2.00' }
  ],
  
  'mascot': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $1.00' },
    { id: 'premium_50', multiplier: 1.5, label: '–ü—Ä–µ–º–∏—É–º +50%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $1.50' },
    { id: 'budget', multiplier: 0.5, label: '–ë—é–¥–∂–µ—Ç -50%', description: '–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ $0.50' }
  ],
  
  'premium_subscription': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $9.99' },
    { id: 'premium', multiplier: 1.3, label: '–ü—Ä–µ–º–∏—É–º +30%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $12.99' },
    { id: 'launch_discount', multiplier: 0.7, label: '–°–∫–∏–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞', description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $6.99' },
    { id: 'psychological', multiplier: 0.95, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$9.49' }
  ]
}

// –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const BASE_PRICES: Record<ABTestType, number> = {
  'token_limit': 2.00,
  'mascot': 1.00, 
  'premium_subscription': 9.99
}

function hashUserId(userId: string): number {
  let hash = 0
  if (userId.length === 0) return hash
  for (let i = 0; i < userId.length; i++) {
    const char = userId.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash
  }
  return Math.abs(hash)
}

export function getPriceVariant(
  userId: string, 
  testType: ABTestType
): { price: number; variant: PriceVariant; testResult: ABTestResult } {
  const basePrice = BASE_PRICES[testType]
  const variants = PRICE_VARIANTS[testType]
  if (!variants || variants.length === 0) {
    const controlVariant = { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' }
    return {
      price: basePrice,
      variant: controlVariant,
      testResult: {
        userId,
        testType,
        variantId: 'control',
        basePrice,
        testPrice: basePrice,
        multiplier: 1.0,
        timestamp: new Date()
      }
    }
  }
  const hash = hashUserId(userId + testType)
  const variantIndex = hash % variants.length
  const selectedVariant = variants[variantIndex]
  const testPrice = Number((basePrice * selectedVariant.multiplier).toFixed(2))
  const testResult: ABTestResult = {
    userId,
    testType,
    variantId: selectedVariant.id,
    basePrice,
    testPrice,
    multiplier: selectedVariant.multiplier,
    timestamp: new Date()
  }
  console.log(`üß™ A/B —Ç–µ—Å—Ç ${testType} –¥–ª—è ${userId}: –≤–∞—Ä–∏–∞–Ω—Ç ${selectedVariant.id}, —Ü–µ–Ω–∞ $${testPrice}`)
  return { price: testPrice, variant: selectedVariant, testResult }
}

export async function logPaywallImpression(testResult: ABTestResult): Promise<void> {
  try {
    const supabase = createClient()
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'impression',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        created_at: new Date().toISOString()
      }])
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è impression:', error)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è impression:', error)
  }
}

export async function logPaywallClick(testResult: ABTestResult): Promise<void> {
  try {
    const supabase = createClient()
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'click',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        created_at: new Date().toISOString()
      }])
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è click:', error)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è click:', error)
  }
}

export async function logPaywallConversion(
  testResult: ABTestResult, 
  paymentIntentId: string,
  actualAmount: number
): Promise<void> {
  try {
    const supabase = createClient()
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'conversion',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        payment_intent_id: paymentIntentId,
        actual_amount: actualAmount,
        created_at: new Date().toISOString()
      }])
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è conversion:', error)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è conversion:', error)
  }
} 