// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è Arcanum Platform
// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏

import { createClient } from '../supabase/client'

// –¢–∏–ø—ã A/B —Ç–µ—Å—Ç–æ–≤
export type ABTestType = 'token_limit' | 'mascot' | 'premium_subscription'

// –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export interface PriceVariant {
  id: string
  multiplier: number // 1.0 = –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞, 1.5 = +50%, 0.75 = -25%
  label: string
  description: string
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç A/B —Ç–µ—Å—Ç–∞
export interface ABTestResult {
  userId: string
  testType: ABTestType
  variantId: string
  basePrice: number
  testPrice: number
  multiplier: number
  timestamp: Date
}

// –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
export interface ConversionMetrics {
  testType: ABTestType
  variantId: string
  impressions: number // –ü–æ–∫–∞–∑—ã paywall
  clicks: number      // –ö–ª–∏–∫–∏ "–ö—É–ø–∏—Ç—å"
  conversions: number // –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
  revenue: number     // –û–±—â–∏–π –¥–æ—Ö–æ–¥
  conversionRate: number // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  averageOrderValue: number // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const PRICE_VARIANTS: Record<string, PriceVariant[]> = {
  'token_limit': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' },
    { id: 'premium_20', multiplier: 1.2, label: '–ü—Ä–µ–º–∏—É–º +20%', description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
    { id: 'discount_25', multiplier: 0.75, label: '–°–∫–∏–¥–∫–∞ -25%', description: '–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
    { id: 'psychological', multiplier: 0.99, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$1.99 –≤–º–µ—Å—Ç–æ $2.00' }
  ],
  
  'mascot': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $1.00' },
    { id: 'premium_50', multiplier: 1.5, label: '–ü—Ä–µ–º–∏—É–º +50%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $1.50' },
    { id: 'budget', multiplier: 0.5, label: '–ë—é–¥–∂–µ—Ç -50%', description: '–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ $0.50' }
  ],
  
  'premium_subscription': [
    { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $9.99' },
    { id: 'premium', multiplier: 1.3, label: '–ü—Ä–µ–º–∏—É–º +30%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $12.99' },
    { id: 'launch_discount', multiplier: 0.7, label: '–°–∫–∏–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞', description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $6.99' },
    { id: 'psychological', multiplier: 0.95, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$9.49' }
  ]
}

// –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const BASE_PRICES: Record<ABTestType, number> = {
  'token_limit': 2.00,
  'mascot': 1.00, 
  'premium_subscription': 9.99
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
 */
function hashUserId(userId: string): number {
  let hash = 0
  if (userId.length === 0) return hash
  
  for (let i = 0; i < userId.length; i++) {
    const char = userId.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
  }
  
  return Math.abs(hash)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ A/B —Ç–µ—Å—Ç–∞
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç
 */
export function getPriceVariant(
  userId: string, 
  testType: ABTestType
): { price: number; variant: PriceVariant; testResult: ABTestResult } {
  
  const basePrice = BASE_PRICES[testType]
  const variants = PRICE_VARIANTS[testType]
  
  if (!variants || variants.length === 0) {
    // Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
    const controlVariant = { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' }
    return {
      price: basePrice,
      variant: controlVariant,
      testResult: {
        userId,
        testType,
        variantId: 'control',
        basePrice,
        testPrice: basePrice,
        multiplier: 1.0,
        timestamp: new Date()
      }
    }
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const hash = hashUserId(userId + testType) // –î–æ–±–∞–≤–ª—è–µ–º testType –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const variantIndex = hash % variants.length
  const selectedVariant = variants[variantIndex]
  
  const testPrice = Number((basePrice * selectedVariant.multiplier).toFixed(2))
  
  const testResult: ABTestResult = {
    userId,
    testType,
    variantId: selectedVariant.id,
    basePrice,
    testPrice,
    multiplier: selectedVariant.multiplier,
    timestamp: new Date()
  }
  
  console.log(`üß™ A/B —Ç–µ—Å—Ç ${testType} –¥–ª—è ${userId}: –≤–∞—Ä–∏–∞–Ω—Ç ${selectedVariant.id}, —Ü–µ–Ω–∞ $${testPrice}`)
  
  return {
    price: testPrice,
    variant: selectedVariant,
    testResult
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ paywall –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ A/B —Ç–µ—Å—Ç–∞
 */
export async function logPaywallImpression(testResult: ABTestResult): Promise<void> {
  try {
    const supabase = createClient()
    
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'impression',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        created_at: new Date().toISOString()
      }])
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è impression:', error)
    } else {
      console.log(`üìä Impression –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: ${testResult.testType} / ${testResult.variantId}`)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è impression:', error)
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ö—É–ø–∏—Ç—å" –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ A/B —Ç–µ—Å—Ç–∞
 */
export async function logPaywallClick(testResult: ABTestResult): Promise<void> {
  try {
    const supabase = createClient()
    
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'click',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        created_at: new Date().toISOString()
      }])
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è click:', error)
    } else {
      console.log(`üìä Click –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: ${testResult.testType} / ${testResult.variantId}`)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è click:', error)
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é (–ø–æ–∫—É–ø–∫—É) –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ A/B —Ç–µ—Å—Ç–∞
 */
export async function logPaywallConversion(
  testResult: ABTestResult, 
  paymentIntentId: string,
  actualAmount: number
): Promise<void> {
  try {
    const supabase = createClient()
    
    const { error } = await supabase
      .from('ab_test_events')
      .insert([{
        user_id: testResult.userId,
        test_type: testResult.testType,
        variant_id: testResult.variantId,
        event_type: 'conversion',
        base_price: testResult.basePrice,
        test_price: testResult.testPrice,
        multiplier: testResult.multiplier,
        payment_intent_id: paymentIntentId,
        actual_amount: actualAmount,
        created_at: new Date().toISOString()
      }])
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è conversion:', error)
    } else {
      console.log(`üìä Conversion –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: ${testResult.testType} / ${testResult.variantId} / $${actualAmount}`)
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è conversion:', error)
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è A/B —Ç–µ—Å—Ç–∞
 */
export async function getConversionMetrics(
  testType: ABTestType,
  dateFrom?: Date,
  dateTo?: Date
): Promise<ConversionMetrics[]> {
  try {
    const supabase = createClient()
    
    let query = supabase
      .from('ab_test_events')
      .select('*')
      .eq('test_type', testType)
    
    if (dateFrom) {
      query = query.gte('created_at', dateFrom.toISOString())
    }
    
    if (dateTo) {
      query = query.lte('created_at', dateTo.toISOString())
    }
    
    const { data: events, error } = await query
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error)
      return []
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    const variantGroups = events?.reduce((groups, event) => {
      if (!groups[event.variant_id]) {
        groups[event.variant_id] = []
      }
      groups[event.variant_id].push(event)
      return groups
    }, {} as Record<string, any[]>) || {}
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const metrics: ConversionMetrics[] = Object.entries(variantGroups).map(([variantId, variantEvents]) => {
      const impressions = variantEvents.filter(e => e.event_type === 'impression').length
      const clicks = variantEvents.filter(e => e.event_type === 'click').length
      const conversions = variantEvents.filter(e => e.event_type === 'conversion').length
      
      const revenue = variantEvents
        .filter(e => e.event_type === 'conversion')
        .reduce((sum, e) => sum + (e.actual_amount || 0), 0)
      
      const conversionRate = impressions > 0 ? (conversions / impressions) * 100 : 0
      const averageOrderValue = conversions > 0 ? revenue / conversions : 0
      
      return {
        testType,
        variantId,
        impressions,
        clicks, 
        conversions,
        revenue,
        conversionRate: Number(conversionRate.toFixed(2)),
        averageOrderValue: Number(averageOrderValue.toFixed(2))
      }
    })
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ${testType}: ${metrics.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`)
    
    return metrics
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error)
    return []
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
 */
export async function getBestPriceVariant(testType: ABTestType): Promise<{
  variantId: string
  conversionRate: number
  revenue: number
  recommendation: string
} | null> {
  try {
    const metrics = await getConversionMetrics(testType)
    
    if (metrics.length === 0) {
      return null
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –ª—É—á—à–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π (–º–∏–Ω–∏–º—É–º 10 impressions –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏)
    const validMetrics = metrics.filter(m => m.impressions >= 10)
    
    if (validMetrics.length === 0) {
      return {
        variantId: 'insufficient_data',
        conversionRate: 0,
        revenue: 0,
        recommendation: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 –ø–æ–∫–∞–∑–æ–≤ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç.'
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥—É (revenue), –∑–∞—Ç–µ–º –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    const bestVariant = validMetrics.sort((a, b) => {
      if (Math.abs(a.revenue - b.revenue) < 0.01) {
        return b.conversionRate - a.conversionRate
      }
      return b.revenue - a.revenue
    })[0]
    
    const recommendation = `–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: ${bestVariant.variantId} —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π ${bestVariant.conversionRate}% –∏ –¥–æ—Ö–æ–¥–æ–º $${bestVariant.revenue.toFixed(2)}`
    
    console.log(`üèÜ –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è ${testType}: ${recommendation}`)
    
    return {
      variantId: bestVariant.variantId,
      conversionRate: bestVariant.conversionRate,
      revenue: bestVariant.revenue,
      recommendation
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error)
    return null
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { ABTestType, PriceVariant, ABTestResult, ConversionMetrics } 