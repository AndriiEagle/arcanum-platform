import { create } from 'zustand'

interface EffectsState {
  // Level Up –∞–Ω–∏–º–∞—Ü–∏—è
  isLevelUpActive: boolean
  currentLevel: number
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ —Ñ–æ–∫—É—Å
  currentFocusSphere: string | null
  globalTheme: 'default' | 'health' | 'career' | 'finance' | 'relationships' | 'personal-growth'
  
  // –ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  soundEnabled: boolean
  soundVolume: number
  
  // –ß–∞—Å—Ç–∏—Ü—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
  particlesEnabled: boolean
  
  // –ù–æ–≤—ã–π: –°–∞–ª—é—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
  isFireworksActive: boolean
  triggerFireworks: (durationMs?: number) => void
  completeFireworks: () => void
  
  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  scheduledRewards: ScheduledReward[]
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è Level Up
  triggerLevelUp: (newLevel: number) => void
  completeLevelUp: () => void
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º –∏ —Ç–µ–º–æ–π
  setFocusSphere: (sphereId: string | null) => void
  setGlobalTheme: (theme: EffectsState['globalTheme']) => void
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º
  toggleSound: () => void
  setSoundVolume: (volume: number) => void
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
  toggleParticles: () => void
  
  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  addScheduledReward: (reward: Omit<ScheduledReward, 'id'>) => void
  removeScheduledReward: (id: string) => void
  checkAndTriggerRewards: (currentLevel: number) => ScheduledReward[]
}

interface ScheduledReward {
  id: string
  triggerLevel: number
  rewardType: 'video' | 'message' | 'achievement' | 'unlock'
  rewardContent: string
  isTriggered: boolean
}

// –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä
const SPHERE_THEMES = {
  'health': {
    primary: '#10B981', // –ó–µ–ª–µ–Ω—ã–π
    secondary: '#059669',
    accent: '#34D399'
  },
  'career': {
    primary: '#3B82F6', // –°–∏–Ω–∏–π
    secondary: '#2563EB',
    accent: '#60A5FA'
  },
  'finance': {
    primary: '#F59E0B', // –û—Ä–∞–Ω–∂–µ–≤—ã–π/–∑–æ–ª–æ—Ç–æ–π
    secondary: '#D97706',
    accent: '#FBBF24'
  },
  'relationships': {
    primary: '#EC4899', // –†–æ–∑–æ–≤—ã–π
    secondary: '#DB2777',
    accent: '#F472B6'
  },
  'personal-growth': {
    primary: '#8B5CF6', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    secondary: '#7C3AED',
    accent: '#A78BFA'
  }
}

export const useEffectsStore = create<EffectsState>((set, get) => ({
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isLevelUpActive: false,
  currentLevel: 15,
  currentFocusSphere: null,
  globalTheme: 'default',
  soundEnabled: true,
  soundVolume: 0.7,
  particlesEnabled: true,
  // –ù–æ–≤—ã–π: —Å–∞–ª—é—Ç —Ñ–ª–∞–≥
  isFireworksActive: false,
  scheduledRewards: [
    {
      id: 'reward-20',
      triggerLevel: 20,
      rewardType: 'achievement',
      rewardContent: '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ—Å—Ç–∏–≥ 20 —É—Ä–æ–≤–Ω—è! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.',
      isTriggered: false
    },
    {
      id: 'reward-25',
      triggerLevel: 25,
      rewardType: 'video',
      rewardContent: 'https://example.com/video-message-25.mp4',
      isTriggered: false
    }
  ],

  // Level Up –¥–µ–π—Å—Ç–≤–∏—è
  triggerLevelUp: (newLevel: number) => {
    set({ 
      isLevelUpActive: true, 
      currentLevel: newLevel 
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    const state = get()
    const triggeredRewards = state.checkAndTriggerRewards(newLevel)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É)
    console.log(`üéâ Level UP! New level: ${newLevel}`, {
      previousLevel: newLevel - 1,
      triggeredRewards: triggeredRewards.length,
      timestamp: new Date().toISOString()
    })
  },

  completeLevelUp: () => {
    set({ isLevelUpActive: false })
  },

  // –ù–æ–≤—ã–π: –°–∞–ª—é—Ç
  triggerFireworks: () => {
    set({ isFireworksActive: true })
  },
  completeFireworks: () => {
    set({ isFireworksActive: false })
  },

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º
  setFocusSphere: (sphereId: string | null) => {
    const themeMap: Record<string, EffectsState['globalTheme']> = {
      '1': 'health',      // –ó–¥–æ—Ä–æ–≤—å–µ
      '2': 'career',      // –ö–∞—Ä—å–µ—Ä–∞
      '4': 'finance',     // –§–∏–Ω–∞–Ω—Å—ã
      '3': 'relationships', // –û—Ç–Ω–æ—à–µ–Ω–∏—è
      '5': 'personal-growth' // –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
    }
    
    const newTheme = sphereId ? themeMap[sphereId] || 'default' : 'default'
    
    set({ 
      currentFocusSphere: sphereId,
      globalTheme: newTheme
    })
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    if (typeof window !== 'undefined') {
      const root = document.documentElement
      if (newTheme !== 'default' && SPHERE_THEMES[newTheme as keyof typeof SPHERE_THEMES]) {
        const theme = SPHERE_THEMES[newTheme as keyof typeof SPHERE_THEMES]
        root.style.setProperty('--theme-primary', theme.primary)
        root.style.setProperty('--theme-secondary', theme.secondary)
        root.style.setProperty('--theme-accent', theme.accent)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        document.body.classList.add('theme-transition')
        setTimeout(() => {
          document.body.classList.remove('theme-transition')
        }, 1000)
      } else {
        // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–µ–º–µ
        root.style.removeProperty('--theme-primary')
        root.style.removeProperty('--theme-secondary')
        root.style.removeProperty('--theme-accent')
      }
    }
    
    console.log(`üéØ Focus changed to sphere: ${sphereId}, theme: ${newTheme}`)
  },

  setGlobalTheme: (theme: EffectsState['globalTheme']) => {
    set({ globalTheme: theme })
  },

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º
  toggleSound: () => {
    set((state) => ({ soundEnabled: !state.soundEnabled }))
  },

  setSoundVolume: (volume: number) => {
    const clampedVolume = Math.max(0, Math.min(1, volume))
    set({ soundVolume: clampedVolume })
  },

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
  toggleParticles: () => {
    set((state) => ({ particlesEnabled: !state.particlesEnabled }))
  },

  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  addScheduledReward: (reward: Omit<ScheduledReward, 'id'>) => {
    const newReward: ScheduledReward = {
      ...reward,
      id: `reward-${Date.now()}`,
      isTriggered: false
    }
    
    set((state) => ({
      scheduledRewards: [...state.scheduledRewards, newReward]
    }))
  },

  removeScheduledReward: (id: string) => {
    set((state) => ({
      scheduledRewards: state.scheduledRewards.filter(r => r.id !== id)
    }))
  },

  checkAndTriggerRewards: (currentLevel: number) => {
    const state = get()
    const triggeredRewards: ScheduledReward[] = []
    
    const updatedRewards = state.scheduledRewards.map(reward => {
      if (!reward.isTriggered && currentLevel >= reward.triggerLevel) {
        triggeredRewards.push(reward)
        return { ...reward, isTriggered: true }
      }
      return reward
    })
    
    if (triggeredRewards.length > 0) {
      set({ scheduledRewards: updatedRewards })
    }
    
    return triggeredRewards
  }
}))

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–º—ã
export const useThemeStyles = () => {
  const { globalTheme } = useEffectsStore()
  
  if (globalTheme === 'default') {
    return {
      primary: '#8B5CF6',
      secondary: '#7C3AED', 
      accent: '#A78BFA'
    }
  }
  
  return SPHERE_THEMES[globalTheme as keyof typeof SPHERE_THEMES] || SPHERE_THEMES['personal-growth']
} 