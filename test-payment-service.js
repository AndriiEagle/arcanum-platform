// –¢–µ—Å—Ç –¥–ª—è PaymentService
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAYMENT SERVICE')
console.log('==============================')

// Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Stripe
const mockPaymentService = {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ü–µ–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
  PRODUCT_PRICES: {
    TOKEN_PACKAGE_SMALL: 2.00,
    TOKEN_PACKAGE_MEDIUM: 5.00,
    TOKEN_PACKAGE_LARGE: 10.00,
    MASCOT_GENERATION: 1.00,
    PREMIUM_MODEL_ACCESS: 0.50,
    PREMIUM_SUBSCRIPTION: 9.99
  },
  
  // –°–∏–º—É–ª—è—Ü–∏—è createPaymentIntent
  createPaymentIntent: async function(params) {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ Payment Intent...`)
    console.log(`   - –°—É–º–º–∞: $${params.amount}`)
    console.log(`   - –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: ${params.productType}`)
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${params.userId}`)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!params.amount || params.amount <= 0) {
      throw new Error('Amount must be greater than 0')
    }
    
    if (!params.userId) {
      throw new Error('User ID is required')
    }
    
    if (!params.productType) {
      throw new Error('Product type is required')
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const mockPaymentIntent = {
      client_secret: `pi_test_${Date.now()}_secret_test123`,
      payment_intent_id: `pi_test_${Date.now()}`,
      amount: Math.round(params.amount * 100), // –í —Ü–µ–Ω—Ç–∞—Ö
      currency: 'usd'
    }
    
    console.log(`‚úÖ Payment Intent —Å–æ–∑–¥–∞–Ω: ${mockPaymentIntent.payment_intent_id}`)
    return mockPaymentIntent
  },
  
  // –°–∏–º—É–ª—è—Ü–∏—è confirmPayment
  confirmPayment: async function(paymentIntentId) {
    console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: ${paymentIntentId}`)
    
    return {
      status: 'succeeded',
      amount: 200, // $2.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
      currency: 'usd',
      metadata: {
        user_id: 'test-user-123',
        product_type: 'token_limit',
        platform: 'arcanum'
      }
    }
  },
  
  // –°–∏–º—É–ª—è—Ü–∏—è checkStripeHealth
  checkStripeHealth: async function() {
    const hasStripeKey = !!process.env.STRIPE_SECRET_KEY
    
    if (hasStripeKey && process.env.STRIPE_SECRET_KEY !== 'sk_test_your_secret_key_here') {
      console.log('üîó –ù–∞—Å—Ç–æ—è—â–∏–π Stripe –∫–ª—é—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
      return { isHealthy: true, accountId: 'acct_test_123' }
    } else {
      console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á')
      return { isHealthy: false, error: 'Test key detected' }
    }
  }
}

async function testTokenPurchase() {
  console.log('\nüí∞ –¢–µ—Å—Ç 1: –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤')
  
  try {
    const params = {
      amount: mockPaymentService.PRODUCT_PRICES.TOKEN_PACKAGE_SMALL,
      productType: 'token_limit',
      userId: 'test-user-123',
      description: '–ü–æ–∫—É–ø–∫–∞ 2000 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤'
    }
    
    const result = await mockPaymentService.createPaymentIntent(params)
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(`   - Client Secret: ${result.client_secret.substring(0, 20)}...`)
    console.log(`   - Payment ID: ${result.payment_intent_id}`)
    console.log(`   - –°—É–º–º–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö: ${result.amount}`)
    console.log(`   - –í–∞–ª—é—Ç–∞: ${result.currency}`)
    
    return result.client_secret && result.payment_intent_id && result.amount === 200
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testMascotPurchase() {
  console.log('\nüé® –¢–µ—Å—Ç 2: –ü–æ–∫—É–ø–∫–∞ –º–∞—Å–∫–æ—Ç–∞')
  
  try {
    const params = {
      amount: mockPaymentService.PRODUCT_PRICES.MASCOT_GENERATION,
      productType: 'mascot',
      userId: 'test-user-456'
    }
    
    const result = await mockPaymentService.createPaymentIntent(params)
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(`   - –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: –º–∞—Å–∫–æ—Ç`)
    console.log(`   - –°—Ç–æ–∏–º–æ—Å—Ç—å: $${params.amount}`)
    console.log(`   - Payment —Å–æ–∑–¥–∞–Ω: ${!!result.client_secret}`)
    
    return result.amount === 100 // $1.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testPremiumSubscription() {
  console.log('\nüëë –¢–µ—Å—Ç 3: –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞')
  
  try {
    const params = {
      amount: mockPaymentService.PRODUCT_PRICES.PREMIUM_SUBSCRIPTION,
      productType: 'premium_subscription',
      userId: 'test-user-789'
    }
    
    const result = await mockPaymentService.createPaymentIntent(params)
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(`   - –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: $${params.amount}/–º–µ—Å—è—Ü`)
    console.log(`   - –°—É–º–º–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö: ${result.amount}`)
    console.log(`   - Payment ID —Å–æ–∑–¥–∞–Ω: ${!!result.payment_intent_id}`)
    
    return result.amount === 999 // $9.99 –≤ —Ü–µ–Ω—Ç–∞—Ö
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testValidation() {
  console.log('\nüö´ –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
  
  const testCases = [
    {
      name: '–ü—É—Å—Ç–∞—è —Å—É–º–º–∞',
      params: { amount: 0, productType: 'test', userId: 'user' },
      expectedError: 'Amount must be greater than 0'
    },
    {
      name: '–ü—É—Å—Ç–æ–π User ID',
      params: { amount: 5.00, productType: 'test', userId: '' },
      expectedError: 'User ID is required'
    },
    {
      name: '–ü—É—Å—Ç–æ–π Product Type',
      params: { amount: 5.00, productType: '', userId: 'user' },
      expectedError: 'Product type is required'
    }
  ]
  
  let validationsPassed = 0
  
  for (const testCase of testCases) {
    try {
      await mockPaymentService.createPaymentIntent(testCase.params)
      console.log(`‚ùå ${testCase.name}: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞`)
    } catch (error) {
      if (error.message === testCase.expectedError) {
        console.log(`‚úÖ ${testCase.name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è`)
        validationsPassed++
      } else {
        console.log(`‚ùå ${testCase.name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`)
      }
    }
  }
  
  return validationsPassed === testCases.length
}

async function testPaymentConfirmation() {
  console.log('\n‚úÖ –¢–µ—Å—Ç 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞')
  
  try {
    const paymentIntentId = 'pi_test_1234567890'
    const result = await mockPaymentService.confirmPayment(paymentIntentId)
    
    console.log('üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${result.status}`)
    console.log(`   - –°—É–º–º–∞: ${result.amount / 100} USD`)
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.metadata.user_id}`)
    console.log(`   - –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: ${result.metadata.product_type}`)
    
    return result.status === 'succeeded' && result.metadata.platform === 'arcanum'
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testStripeHealth() {
  console.log('\nüè• –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Stripe –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
  
  try {
    const health = await mockPaymentService.checkStripeHealth()
    
    console.log('üìä –°—Ç–∞—Ç—É—Å Stripe:')
    console.log(`   - –ó–¥–æ—Ä–æ–≤—å–µ: ${health.isHealthy ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã'}`)
    console.log(`   - Account ID: ${health.accountId || '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}`)
    console.log(`   - –û—à–∏–±–∫–∞: ${health.error || '–ù–µ—Ç'}`)
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–µ–º false –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    return health.hasOwnProperty('isHealthy')
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

function testProductPrices() {
  console.log('\nüíµ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
  
  const prices = mockPaymentService.PRODUCT_PRICES
  
  console.log('üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:')
  console.log(`   - –ú–∞–ª—ã–π –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: $${prices.TOKEN_PACKAGE_SMALL}`)
  console.log(`   - –°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: $${prices.TOKEN_PACKAGE_MEDIUM}`)
  console.log(`   - –ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: $${prices.TOKEN_PACKAGE_LARGE}`)
  console.log(`   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–æ—Ç–∞: $${prices.MASCOT_GENERATION}`)
  console.log(`   - –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏: $${prices.PREMIUM_MODEL_ACCESS}`)
  console.log(`   - –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: $${prices.PREMIUM_SUBSCRIPTION}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
  const allPricesPositive = Object.values(prices).every(price => price > 0)
  console.log(`‚úÖ –í—Å–µ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: ${allPricesPositive}`)
  
  return allPricesPositive
}

async function main() {
  try {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Payment Service...')
    
    const results = {
      tokenPurchase: await testTokenPurchase(),
      mascotPurchase: await testMascotPurchase(),
      premiumSubscription: await testPremiumSubscription(),
      validation: await testValidation(),
      paymentConfirmation: await testPaymentConfirmation(),
      stripeHealth: await testStripeHealth(),
      productPrices: testProductPrices()
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ PAYMENT SERVICE')
    console.log('======================================')
    
    Object.entries(results).forEach(([key, passed]) => {
      const testName = key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .trim()
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${testName}`)
    })
    
    const passedTests = Object.values(results).filter(Boolean).length
    const totalTests = Object.keys(results).length
    const serviceScore = Math.round((passedTests / totalTests) * 100)
    
    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ PAYMENT SERVICE: ${serviceScore}% (${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`)
    
    if (serviceScore >= 85) {
      console.log('\nüéâ –®–ê–ì 9 –ó–ê–í–ï–†–®–ï–ù!')
      console.log('‚úÖ Stripe —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω')
      console.log('‚úÖ –í—Å–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è')
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log('‚úÖ –¶–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
      console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 10: Payment API endpoints')
    } else {
      console.log('\n‚ö†Ô∏è  Payment Service —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

main() 