import { NextRequest, NextResponse } from 'next/server'
import { createPaymentIntent, PRODUCT_PRICES } from '../../../../../lib/services/paymentService'

interface PaymentRequestBody {
  amount?: number
  product_type: string
  user_id: string
  description?: string
}

export async function POST(request: NextRequest) {
  try {
    const body: PaymentRequestBody = await request.json()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.product_type || !body.user_id) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: product_type, user_id' 
        },
        { status: 400 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    let amount = body.amount
    if (!amount) {
      switch (body.product_type) {
        case 'token_limit':
          amount = PRODUCT_PRICES.TOKEN_PACKAGE_SMALL
          break
        case 'mascot':
          amount = PRODUCT_PRICES.MASCOT_GENERATION
          break
        case 'premium_model':
          amount = PRODUCT_PRICES.PREMIUM_MODEL_ACCESS
          break
        case 'premium_subscription':
          amount = PRODUCT_PRICES.PREMIUM_SUBSCRIPTION
          break
        default:
          amount = 1.00 // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞
      }
    }

    console.log(`üí≥ API: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ${body.product_type} –∑–∞ $${amount} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${body.user_id}`)

    // –°–æ–∑–¥–∞–µ–º Payment Intent —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
    try {
      const paymentResult = await createPaymentIntent({
        amount: amount,
        productType: body.product_type,
        userId: body.user_id,
        description: body.description
      })
      
      console.log(`‚úÖ API: Payment Intent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${paymentResult.payment_intent_id}`)

      return NextResponse.json({
        success: true,
        client_secret: paymentResult.client_secret,
        payment_intent_id: paymentResult.payment_intent_id,
        amount: paymentResult.amount,
        currency: paymentResult.currency
      })
      
    } catch (stripeError: any) {
      // –ï—Å–ª–∏ Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (stripeError.message?.includes('Stripe –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')) {
        console.log(`üîß DEMO MODE: Simulating payment for ${body.product_type}`)
        
        return NextResponse.json({
          success: true,
          client_secret: 'demo_client_secret',
          payment_intent_id: 'demo_payment_intent_' + Date.now(),
          amount: amount * 100,
          currency: 'usd',
          demo_mode: true
        })
      }
      
      throw stripeError
    }

  } catch (error: any) {
    console.error('‚ùå API Error –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error)
    
    return NextResponse.json(
      {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è'
      },
      { status: 500 }
    )
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö
export async function GET() {
  try {
    return NextResponse.json({
      success: true,
      prices: PRODUCT_PRICES,
      currency: 'USD'
    })
  } catch (error: any) {
    return NextResponse.json(
      {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω'
      },
      { status: 500 }
    )
  }
} 