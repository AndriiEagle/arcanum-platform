import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { createClient } from '../../../../lib/supabase/client'
import { logTokenUsage, getUserTokenUsage } from '../../../../lib/services/tokenService'
import { calculateCost } from '../../../../lib/config/aiModels'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const ARCANUM_BRAIN_PROMPT = `–¢—ã ‚Äî Chief Orchestrator AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Arcanum...` // [existing prompt content]

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
function getMaxTokensForModel(modelId: string): number {
  const modelLimits: Record<string, number> = {
    'gpt-4o-mini': 4000,
    'gpt-4o': 4000, 
    'gpt-4-turbo': 4000,
    'gpt-4': 2000,
    'o1-preview': 8000,
    'o1-mini': 4000,
    'o3': 8000
  }
  return modelLimits[modelId] || 1000
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
function detectCommandType(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('–¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É') || lowerMessage.includes('—Å–æ–∑–¥–∞–π –∫–Ω–æ–ø–∫—É')) {
    return 'create_button'
  }
  
  if (lowerMessage.includes('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É') || lowerMessage.includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞')) {
    return 'create_task'
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π') && lowerMessage.includes('—Å—Ñ–µ—Ä')) {
    return 'analyze_spheres'
  }
  
  if (lowerMessage.includes('—Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞') || lowerMessage.includes('—Ñ–æ–∫—É—Å –Ω–∞')) {
    return 'focus_mode'
  }
  
  if (lowerMessage.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π') && (lowerMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') || lowerMessage.includes('–∞—Ä—Ç'))) {
    return 'generate_image'
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–≥—Ä–µ—Å—Å') || lowerMessage.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
    return 'show_progress'
  }
  
  return 'general_chat'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserContext(userId: string): Promise<string> {
  try {
    if (!userId || userId === 'anonymous') {
      return `
      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ì–æ—Å—Ç—å (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      –°—Ç–∞—Ç—É—Å: Demo —Ä–µ–∂–∏–º
      –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ë–∞–∑–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      `
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const supabase = createClient()
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userStats } = await supabase
      .from('user_stats')
      .select('level, current_xp, next_level_xp, energy')
      .eq('user_id', userId)
      .single()
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã
    const { data: spheres } = await supabase
      .from('life_spheres')
      .select('sphere_name, health_percentage')
      .eq('user_id', userId)
      .eq('is_active', true)
      
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º userId
    const contextData = userStats || {
      level: 15,
      current_xp: 2340,
      next_level_xp: 3000,
      energy: 85
    }
    
    const activeSpheres = (spheres && spheres.length > 0)
      ? spheres.map((s: { sphere_name: string; health_percentage: number }) => `${s.sphere_name} (${s.health_percentage}%)`).join(', ')
      : '–ó–¥–æ—Ä–æ–≤—å–µ (78%), –ö–∞—Ä—å–µ—Ä–∞ (92%), –§–∏–Ω–∞–Ω—Å—ã (88%)'
    
    const userContext = `
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
    –£—Ä–æ–≤–µ–Ω—å: ${contextData.level} (${contextData.current_xp?.toLocaleString()} / ${contextData.next_level_xp?.toLocaleString()} XP)
    –≠–Ω–µ—Ä–≥–∏—è: ${contextData.energy}%
    –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã: ${activeSpheres}
    –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: –ú–µ–¥–∏—Ç–∞—Ü–∏—è, –ö–æ–¥-—Ä–µ–≤—å—é, –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã: –ë–æ–¥—Ä–æ—Å—Ç—å, –§–æ–∫—É—Å
    `
    
    return userContext.trim()
  } catch (error) {
    console.error('Error getting user context:', error)
    return ''
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async function processSpecialCommands(
  message: string, 
  aiResponse: string, 
  userId: string, 
  commandType: string
): Promise<{ text: string; actions?: Record<string, unknown> }> {
  
  switch (commandType) {
    case 'create_button':
      return {
        text: `${aiResponse}\n\nüîò Button Programming Agent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.`,
        actions: { type: 'create_button', data: { message } }
      }
      
    case 'create_task':
      return {
        text: `${aiResponse}\n\n‚úÖ Task Assessor Agent –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É! –£—Ç–æ—á–Ω–∏—Ç–µ: –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –¥–µ–¥–ª–∞–π–Ω?`,
        actions: { type: 'create_task', data: { message } }
      }
      
    case 'analyze_spheres':
      return {
        text: `${aiResponse}\n\nüåê –ê–Ω–∞–ª–∏–∑ 12 —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏:\n‚Ä¢ –¢–æ–ø-—Å—Ñ–µ—Ä—ã: –ö–∞—Ä—å–µ—Ä–∞ (92%), –§–∏–Ω–∞–Ω—Å—ã (88%)\n‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: –•–æ–±–±–∏ (45%), –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (32%)\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –•–æ–±–±–∏ –¥–æ 60%`,
        actions: { type: 'analyze_spheres', data: { userId } }
      }
      
    case 'focus_mode':
      return {
        text: `${aiResponse}\n\nüéØ Global Design Agent –≥–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω! –ù–∞ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è? –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`,
        actions: { type: 'focus_mode', data: { message } }
      }
      
    case 'generate_image':
      return {
        text: `${aiResponse}\n\nüé® Mascot Generator Agent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏ —Ç–µ–º–∞—Ç–∏–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?`,
        actions: { type: 'generate_image', data: { message } }
      }
      
    case 'show_progress':
      return {
        text: `${aiResponse}\n\nüìä –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: 15 (+73% –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ)\n‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: 85% (–æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å!)\n‚Ä¢ –°—Ñ–µ—Ä—ã –≤—ã—à–µ 80%: 3 –∏–∑ 12\n‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π milestone: –£—Ä–æ–≤–µ–Ω—å 16 —á–µ—Ä–µ–∑ 2-3 –¥–Ω—è`,
        actions: { type: 'show_progress', data: { userId } }
      }
      
    default:
      return {
        text: aiResponse
      }
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, userId = 'anonymous', modelId = 'gpt-4o-mini' } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 })
    }

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json({ error: 'OpenAI API key not configured' }, { status: 500 })
    }

    console.log('Arcanum Brain processing message:', message, 'for user:', userId)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    const userContext = await getUserContext(userId)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
    const commandType = detectCommandType(message)
    
    let systemPrompt = ARCANUM_BRAIN_PROMPT
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–º–ø—Ç—É
    if (userContext) {
      systemPrompt += `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${userContext}`
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω-–ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OpenAI API (–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è)
    if (userId !== 'anonymous') {
      try {
        const userTokensUsed = await getUserTokenUsage(userId)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –∏–∑ –ë–î)
        const isPremium = false // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ user_stats –∏–ª–∏ auth metadata
        const tokenLimit = isPremium ? 10000 : 1000
        
        if (userTokensUsed > tokenLimit) {
          console.log(`üö´ Token limit exceeded for user ${userId}: ${userTokensUsed}/${tokenLimit}`)
          
          return NextResponse.json({
            error: 'Token limit reached',
            upgrade_url: '/upgrade',
            tokens_used: userTokensUsed,
            limit: tokenLimit,
            paywall: {
              type: 'token_limit',
              cost: 2.00,
              message: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å 2000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ $2?',
              features: ['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 2000 —Ç–æ–∫–µ–Ω–æ–≤', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '24 —á–∞—Å–∞ –¥–æ—Å—Ç—É–ø–∞']
            }
          }, { status: 402 })
        } else if (userTokensUsed > tokenLimit * 0.8) {
          // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80% –ª–∏–º–∏—Ç–∞
          console.log(`‚ö†Ô∏è Token usage warning for user ${userId}: ${userTokensUsed}/${tokenLimit} (${Math.round((userTokensUsed/tokenLimit)*100)}%)`)
        }
      } catch (error) {
        console.error('Error checking token limits:', error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${modelId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    const response = await openai.chat.completions.create({
      model: modelId,
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: message
        }
      ],
      max_tokens: getMaxTokensForModel(modelId),
      temperature: 0.7,
    })

    const aiResponse = response.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.'

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    if (userId !== 'anonymous' && response.usage) {
      try {
        await logTokenUsage({
          user_id: userId,
          model_id: modelId,
          prompt_tokens: response.usage.prompt_tokens || 0,
          completion_tokens: response.usage.completion_tokens || 0,
          total_tokens: response.usage.total_tokens || 0,
          cost: calculateCost(modelId, response.usage.prompt_tokens || 0, response.usage.completion_tokens || 0)
        })
        console.log(`üí∞ Logged ${response.usage.total_tokens} tokens for user ${userId}`)
      } catch (error) {
        console.error('Failed to log token usage:', error)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const processedResponse = await processSpecialCommands(message, aiResponse, userId, commandType)

    return NextResponse.json({ 
      response: processedResponse.text,
      actions: processedResponse.actions,
      commandType,
      modelUsed: modelId,
      tokensUsed: response.usage?.total_tokens || 0
    })

  } catch (error) {
    console.error('Error in Arcanum Brain API:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    
    return NextResponse.json({
      response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
      type: 'system'
    }, { status: 500 })
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET() {
  return NextResponse.json({ 
    message: 'Arcanum Brain Chat API',
    status: 'active',
    version: '1.0.0',
    hasApiKey: !!process.env.OPENAI_API_KEY,
    supportedModels: [
      'gpt-4o-mini', 'gpt-4o', 'gpt-4-turbo', 'gpt-4', 
      'o1-preview', 'o1-mini', 'o3'
    ],
    agents: [
      'Chief Orchestrator AI',
      'Button Programming Agent', 
      'Task Assessor Agent',
      'Resonating Task Agent',
      'Global Design Agent',
      'Mascot Generator Agent'
    ]
  })
} 