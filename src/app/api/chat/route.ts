import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { createServerClient as createClient } from '../../../../lib/supabase/server'
import { logTokenUsage, getUserTokenUsage } from '../../../../lib/services/tokenService'
import { calculateCost } from '../../../../lib/config/aiModels'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤–Ω—É—Ç—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ POST, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ –±–µ–∑ –∫–ª—é—á–∞

const ARCANUM_BRAIN_PROMPT = `–¢—ã ‚Äî Chief Orchestrator AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Arcanum, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–í–û–Ø –†–û–õ–¨:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ 9 –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä (S1-S9)
- –î–∞—ë—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ü–µ–ª–µ–π, –ø—Ä–æ–±–ª–µ–º –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ü–æ–º–æ–≥–∞–µ—à—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á
- –û—Ç–≤–µ—á–∞–µ—à—å –≤ —Å—Ç–∏–ª–µ –º—É–¥—Ä–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∞ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
1. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
2. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ñ–µ—Ä—ã (S1-S9) –∫–æ–≥–¥–∞ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã
3. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏, XP –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ñ–µ—Ä
4. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
5. –ú–æ—Ç–∏–≤–∏—Ä—É–π —á–µ—Ä–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ü–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ü—Ä—è–º–æ–π, —á–µ—Å—Ç–Ω—ã–π, –±–µ–∑ –≤–æ–¥—ã
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π
- –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–ª–µ–º–µ–Ω—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ (XP, —É—Ä–æ–≤–Ω–∏, –∫–≤–µ—Å—Ç—ã)

–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –±–∞–∑–æ–≤—É—é –ø–æ–º–æ—â—å.`

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
function getMaxTokensForModel(modelId: string): number {
  const modelLimits: Record<string, number> = {
    'gpt-4o-mini': 4000,
    'gpt-4o': 4000, 
    'gpt-4-turbo': 4000,
    'gpt-4': 2000,
    'o1-preview': 8000,
    'o1-mini': 4000,
    'o3': 8000
  }
  return modelLimits[modelId] || 1000
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
function detectCommandType(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('–¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É') || lowerMessage.includes('—Å–æ–∑–¥–∞–π –∫–Ω–æ–ø–∫—É')) {
    return 'create_button'
  }
  
  if (lowerMessage.includes('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É') || lowerMessage.includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞')) {
    return 'create_task'
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π') && lowerMessage.includes('—Å—Ñ–µ—Ä')) {
    return 'analyze_spheres'
  }
  
  if (lowerMessage.includes('—Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞') || lowerMessage.includes('—Ñ–æ–∫—É—Å –Ω–∞')) {
    return 'focus_mode'
  }
  
  if (lowerMessage.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π') && (lowerMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') || lowerMessage.includes('–∞—Ä—Ç'))) {
    return 'generate_image'
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–≥—Ä–µ—Å—Å') || lowerMessage.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
    return 'show_progress'
  }
  
  return 'general_chat'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserContext(userId: string): Promise<string> {
  try {
    const supabase = createClient()
    
    const { data: userStats } = await supabase
      .from('user_stats')
      .select('level, current_xp, next_level_xp, energy')
      .eq('user_id', userId)
      .single()
    
    const { data: spheres } = await supabase
      .from('life_spheres')
      .select('sphere_name, health_percentage, sphere_code')
      .eq('user_id', userId)
      .eq('is_active', true)

    // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –∫–∞–∫ –≤ /api/memory/summary
    const { data: op } = await supabase
      .from('operator_profiles')
      .select('version,last_update')
      .eq('user_id', userId)
      .maybeSingle()

    const { data: sprofiles } = await supabase
      .from('sphere_profiles')
      .select('sphere_code, meta, components, synergy')
      .eq('user_id', userId)

    const contextData = userStats || {
      level: 1,
      current_xp: 0,
      next_level_xp: 100,
      energy: 100
    }
    
    const activeSpheres = (spheres && spheres.length > 0)
      ? spheres.map((s: { sphere_name: string; sphere_code: string | null; health_percentage: number }) => `${s.sphere_code || s.sphere_name} (${s.health_percentage}%)`).join(', ')
      : 'S1 (50%), S2 (50%), S3 (50%)'

    // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï –õ–û–ì–ò–ö–£ —á—Ç–æ –≤ /api/memory/summary
    const profilesSummary = (sprofiles || [])
      .map((sp: any) => {
        const sphereCode = sp.sphere_code
        // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const keyGoals = sp.components?.financial_goals_and_deadlines?.primary_goal || sp.meta?.title || null
        
        // üöÄ –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç –≤ meta.title, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        let goalText = keyGoals
        if (!goalText && sp.meta) {
          // –ò—â–µ–º –ª—é–±—ã–µ –ø–æ–ª—è –≤ meta –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–ª–∏, –ø–ª–∞–Ω—ã, –æ–ø–∏—Å–∞–Ω–∏—è
          goalText = sp.meta.description || sp.meta.goal || sp.meta.target || sp.meta.objective || null
        }
        
        // üöÄ –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –≤ meta, –∏—â–µ–º –≤ components
        if (!goalText && sp.components) {
          // –ò—â–µ–º –≤ –ª—é–±—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —á—Ç–æ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª–∏
          for (const [key, value] of Object.entries(sp.components)) {
            if (typeof value === 'object' && value !== null) {
              const obj = value as any
              if (obj.primary_goal || obj.goal || obj.target || obj.description) {
                goalText = obj.primary_goal || obj.goal || obj.target || obj.description
                break
              }
            } else if (typeof value === 'string' && value.length > 10) {
              goalText = value
              break
            }
          }
        }
        
        // üöÄ –ù–û–í–û–ï: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä—è–º–æ –≤ synergy
        if (!goalText && sp.synergy && typeof sp.synergy === 'object') {
          for (const [key, value] of Object.entries(sp.synergy)) {
            if (typeof value === 'string' && value.length > 10) {
              goalText = value
              break
            }
          }
        }
        
        return goalText ? `${sphereCode}: ${goalText}` : null
      })
      .filter(Boolean)
      .join('\n')

    // üöÄ –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const userContext = `
–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
–£—Ä–æ–≤–µ–Ω—å: ${contextData.level} (${(contextData.current_xp || 0).toLocaleString()} / ${(contextData.next_level_xp || 0).toLocaleString()} XP)
–≠–Ω–µ—Ä–≥–∏—è: ${contextData.energy}%
–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã: ${activeSpheres}
–ü–∞—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –≤–µ—Ä—Å–∏—è ${op?.version || '‚Äî'}, –¥–∞—Ç–∞ ${op?.last_update || '‚Äî'}

–¶–ï–õ–ò –ò –ü–õ–ê–ù–´ –ü–û –°–§–ï–†–ê–ú:
${profilesSummary || '–¶–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –≠–¢–ò –ö–û–ù–ö–†–ï–¢–ù–´–ï –¶–ï–õ–ò –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã!`
    
    console.log('[getUserContext] Generated context length:', userContext.length)
    console.log('[getUserContext] Profiles summary preview:', profilesSummary?.substring(0, 200) || 'Empty')
    
    return userContext
  } catch (error) {
    console.error('[getUserContext] Error getting user context:', error)
    return ''
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, userId, modelId = 'gpt-4o-mini' } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 })
    }

    if (!userId || userId === 'anonymous') {
      return NextResponse.json({
        error: 'AUTH_REQUIRED',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞',
        login_url: '/auth/login'
      }, { status: 401 })
    }

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json({ error: 'OpenAI API key not configured' }, { status: 500 })
    }

    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

    console.log('Arcanum Brain processing message:', message, 'for user:', userId)

    const userContext = await getUserContext(userId)

    const commandType = detectCommandType(message)
    
    let systemPrompt = ARCANUM_BRAIN_PROMPT
    if (userContext) {
      systemPrompt += `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${userContext}`
    }

    try {
      const userTokensUsed = await getUserTokenUsage(userId)
      const isPremium = false
      // üöÄ –í–†–ï–ú–ï–ù–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
      const tokenLimit = isPremium ? 10000 : 5000 // –ë—ã–ª–æ 1000, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5000
      
      if (userTokensUsed > tokenLimit) {
        console.log(`üö´ Token limit exceeded for user ${userId}: ${userTokensUsed}/${tokenLimit}`)
        return NextResponse.json({
          error: 'TOKEN_LIMIT',
          tokens_used: userTokensUsed,
          limit: tokenLimit,
          paywall: {
            type: 'token_limit',
            cost: 2.00,
            message: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å 2000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ $2?'
          }
        }, { status: 402 })
      }
    } catch (error) {
      console.error('Error checking token limits:', error)
    }

    const response = await openai.chat.completions.create({
      model: modelId,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ],
      max_tokens: getMaxTokensForModel(modelId),
      temperature: 0.7,
    })

    const aiResponse = response.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.'

    if (response.usage) {
      try {
        await logTokenUsage({
          user_id: userId,
          model_id: modelId,
          prompt_tokens: response.usage.prompt_tokens || 0,
          completion_tokens: response.usage.completion_tokens || 0,
          total_tokens: response.usage.total_tokens || 0,
          cost: calculateCost(modelId, response.usage.prompt_tokens || 0, response.usage.completion_tokens || 0)
        })
        console.log(`üí∞ Logged ${response.usage.total_tokens} tokens for user ${userId}`)
      } catch (error) {
        console.error('Failed to log token usage:', error)
      }
    }

    return NextResponse.json({ 
      response: aiResponse,
      commandType,
      modelUsed: modelId,
      tokensUsed: response.usage?.total_tokens || 0
    })

  } catch (error) {
    console.error('Error in Arcanum Brain API:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    
    return NextResponse.json({
      response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
      type: 'system'
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({ 
    message: 'Arcanum Brain Chat API',
    status: 'active',
    version: '1.0.0',
    hasApiKey: !!process.env.OPENAI_API_KEY,
    supportedModels: [
      'gpt-4o-mini', 'gpt-4o', 'gpt-4-turbo', 'gpt-4', 
      'o1-preview', 'o1-mini', 'o3'
    ],
    agents: [
      'Chief Orchestrator AI',
      'Button Programming Agent', 
      'Task Assessor Agent',
      'Resonating Task Agent',
      'Global Design Agent',
      'Mascot Generator Agent'
    ]
  })
} 