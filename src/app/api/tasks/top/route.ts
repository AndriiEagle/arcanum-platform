import { NextRequest, NextResponse } from 'next/server'
import { topTasks } from '../../../../../lib/services/resonanceService'

export async function GET(req: NextRequest) {
  try {
    const url = new URL(req.url)
    const userId = url.searchParams.get('userId') || ''
    const n = Math.max(1, Math.min(20, Number(url.searchParams.get('n') || 5)))
    
    if (!userId) {
      return NextResponse.json({ items: [] })
    }

    // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Graceful handling –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const items = await topTasks(userId, n)
    
    return NextResponse.json({ 
      items: items || [],
      count: items?.length || 0,
      userId: userId
    })
    
  } catch (error: any) {
    console.error('[API][tasks/top] Error:', error.message, {
      userId: new URL(req.url).searchParams.get('userId'),
      stack: error.stack
    })
    
    // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ 500 –æ—à–∏–±–∫–∏
    return NextResponse.json({ 
      items: [], 
      count: 0,
      error: error?.message || 'unknown',
      fallback: true 
    }, { status: 200 }) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –≤–º–µ—Å—Ç–æ 500
  }
} 