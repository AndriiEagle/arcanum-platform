'use client'

import React, { useState, useEffect } from 'react'
import { loadStripe } from '@stripe/stripe-js'

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
type ProductType = 'token_limit' | 'mascot' | 'premium_model' | 'premium_subscription'

interface PaywallModalProps {
  isOpen: boolean
  type: ProductType
  cost: number
  onClose: () => void
  onSuccess?: (paymentIntentId: string) => void
  userId?: string
  description?: string
}

interface PaymentState {
  isLoading: boolean
  error: string | null
  success: boolean
  paymentIntentId: string | null
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const PRODUCT_CONFIG = {
  token_limit: {
    icon: 'üí∞',
    title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã',
    description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 2000 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤',
    benefits: ['2000 —Ç–æ–∫–µ–Ω–æ–≤', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞']
  },
  mascot: {
    icon: 'üé®',
    title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–æ—Ç–∞',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI',
    benefits: ['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è']
  },
  premium_model: {
    icon: 'üß†',
    title: '–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å',
    description: '–î–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º –º–æ—â–Ω—ã–º AI –º–æ–¥–µ–ª—è–º –Ω–∞ 1 —á–∞—Å',
    benefits: ['GPT-4o –¥–æ—Å—Ç—É–ø', 'O1-preview –º–æ–¥–µ–ª—å', '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å']
  },
  premium_subscription: {
    icon: 'üëë',
    title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
    description: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    benefits: ['–í—Å–µ –º–æ–¥–µ–ª–∏', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
  }
} as const

export default function PaywallModal({ 
  isOpen, 
  type, 
  cost, 
  onClose, 
  onSuccess,
  userId = 'anonymous-user',
  description 
}: PaywallModalProps) {
  const [paymentState, setPaymentState] = useState<PaymentState>({
    isLoading: false,
    error: null,
    success: false,
    paymentIntentId: null
  })

  const [stripe, setStripe] = useState<any>(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
  useEffect(() => {
    const initializeStripe = async () => {
      try {
        const stripeInstance = await loadStripe(
          process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
        )
        setStripe(stripeInstance)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Stripe:', error)
        setPaymentState(prev => ({
          ...prev,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É'
        }))
      }
    }

    if (isOpen) {
      initializeStripe()
    }
  }, [isOpen])

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      setPaymentState({
        isLoading: false,
        error: null,
        success: false,
        paymentIntentId: null
      })
    }
  }, [isOpen])

  const handlePurchase = async () => {
    if (!stripe) {
      setPaymentState(prev => ({
        ...prev,
        error: '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞'
      }))
      return
    }

    setPaymentState(prev => ({
      ...prev,
      isLoading: true,
      error: null
    }))

    try {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ Payment Intent —á–µ—Ä–µ–∑ –Ω–∞—à API
      console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: ${type}, $${cost}`)
      
      const response = await fetch('/api/payments/create-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          amount: cost,
          product_type: type,
          user_id: userId,
          description: description || PRODUCT_CONFIG[type].description
        })
      })

      const result = await response.json()

      if (!response.ok || !result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞')
      }

      const { client_secret, payment_intent_id } = result

      console.log(`‚úÖ Payment Intent —Å–æ–∑–¥–∞–Ω: ${payment_intent_id}`)

      // 2. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Stripe Checkout (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
      const { error: stripeError } = await stripe.redirectToCheckout({
        sessionId: client_secret // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω session_id
      })

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Stripe Elements (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π, –Ω–æ –≥–∏–±–∫–∏–π –º–µ—Ç–æ–¥)
      if (stripeError) {
        // Fallback: –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Stripe Payment Links
        const paymentUrl = `https://checkout.stripe.com/pay/${client_secret}`
        window.open(paymentUrl, '_blank')
        
        // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–µ–º–æ
        setTimeout(() => {
          setPaymentState({
            isLoading: false,
            error: null,
            success: true,
            paymentIntentId: payment_intent_id
          })
          
          if (onSuccess) {
            onSuccess(payment_intent_id)
          }
        }, 2000)
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', error)
      
      setPaymentState({
        isLoading: false,
        error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂',
        success: false,
        paymentIntentId: null
      })
    }
  }

  const handleClose = () => {
    if (!paymentState.isLoading) {
      onClose()
    }
  }

  const config = PRODUCT_CONFIG[type]

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full mx-4 overflow-hidden">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-6 text-white text-center">
          <div className="text-4xl mb-2">{config.icon}</div>
          <h3 className="text-xl font-bold mb-1">
            {config.title}
          </h3>
          <p className="text-purple-100 text-sm">
            {config.description}
          </p>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <div className="p-6">
          
          {/* –¶–µ–Ω–∞ */}
          <div className="text-center mb-6">
            <div className="text-4xl font-bold text-gray-900 dark:text-white mb-1">
              ${cost}
            </div>
            {type === 'premium_subscription' && (
              <div className="text-sm text-gray-500">–≤ –º–µ—Å—è—Ü</div>
            )}
          </div>

          {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
              –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
            </h4>
            <ul className="space-y-2">
              {config.benefits.map((benefit, index) => (
                <li key={index} className="flex items-center text-sm text-gray-700 dark:text-gray-300">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                  {benefit}
                </li>
              ))}
            </ul>
          </div>

          {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—Ö–∞ */}
          {paymentState.success && (
            <div className="mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
              <div className="flex items-center">
                <div className="text-green-500 text-xl mr-3">‚úÖ</div>
                <div>
                  <div className="font-semibold text-green-800 dark:text-green-200">
                    –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!
                  </div>
                  <div className="text-sm text-green-600 dark:text-green-300">
                    ID: {paymentState.paymentIntentId?.substring(0, 12)}...
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –û—à–∏–±–∫–∞ */}
          {paymentState.error && (
            <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
              <div className="flex items-center">
                <div className="text-red-500 text-xl mr-3">‚ùå</div>
                <div>
                  <div className="font-semibold text-red-800 dark:text-red-200">
                    –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
                  </div>
                  <div className="text-sm text-red-600 dark:text-red-300">
                    {paymentState.error}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex space-x-3">
            {!paymentState.success ? (
              <>
                <button
                  onClick={handlePurchase}
                  disabled={paymentState.isLoading || !stripe}
                  className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center"
                >
                  {paymentState.isLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                      –û–±—Ä–∞–±–æ—Ç–∫–∞...
                    </>
                  ) : (
                    <>
                      üîí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å
                    </>
                  )}
                </button>
                <button
                  onClick={handleClose}
                  disabled={paymentState.isLoading}
                  className="flex-1 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 py-3 px-4 rounded-lg font-semibold hover:bg-gray-400 dark:hover:bg-gray-500 disabled:opacity-50 transition-all duration-200"
                >
                  –ü–æ–∑–∂–µ
                </button>
              </>
            ) : (
              <button
                onClick={handleClose}
                className="w-full bg-green-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-green-700 transition-all duration-200"
              >
                –û—Ç–ª–∏—á–Ω–æ! üéâ
              </button>
            )}
          </div>

          {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
          <div className="mt-4 text-center">
            <div className="text-xs text-gray-500 dark:text-gray-400 flex items-center justify-center">
              <div className="mr-1">üîí</div>
              –ó–∞—â–∏—â–µ–Ω–æ Stripe ‚Ä¢ SSL —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 