// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TokenCounter –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏

import React, { memo, useCallback, useMemo, useRef } from 'react'
import { 
  useDebounce, 
  useThrottle, 
  useMemoizedSelector, 
  useIntersectionObserver,
  usePerformanceMonitor,
  useCachedComputation,
  usePrefetch
} from '../../lib/hooks/usePerformanceOptimization'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
interface OptimizedTokenCounterProps {
  userId?: string
  onUpgrade?: () => void
  compact?: boolean
  showDetails?: boolean
  className?: string
}

interface TokenState {
  used: number
  limit: number
  isLoading: boolean
  isPremium: boolean
  lastUpdated: Date
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
const selectTokenUsage = (state: TokenState) => ({
  used: state.used,
  limit: state.limit,
  percentage: state.limit > 0 ? (state.used / state.limit) * 100 : 0,
  isPremium: state.isPremium
})

const selectTokenStatus = (state: TokenState) => {
  const percentage = state.limit > 0 ? (state.used / state.limit) * 100 : 0
  
  if (percentage >= 100) return { level: 'critical', color: 'red', message: '–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω' }
  if (percentage >= 85) return { level: 'warning', color: 'orange', message: '–ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É' }
  if (percentage >= 70) return { level: 'caution', color: 'yellow', message: '–í–Ω–∏–º–∞–Ω–∏–µ' }
  return { level: 'normal', color: 'green', message: '–í –Ω–æ—Ä–º–µ' }
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
const ProgressBar = memo<{
  percentage: number
  color: string
  animated?: boolean
}>(({ percentage, color, animated = false }) => {
  const progressStyle = useMemo(() => ({
    width: `${Math.min(percentage, 100)}%`,
    backgroundColor: color,
    transition: 'width 0.3s ease-in-out',
    animation: animated ? 'pulse 2s infinite' : 'none'
  }), [percentage, color, animated])

  return (
    <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
      <div 
        className="h-full rounded-full"
        style={progressStyle}
      />
      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      `}</style>
    </div>
  )
})
ProgressBar.displayName = 'ProgressBar'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const UpgradeButton = memo<{
  onUpgrade: () => void
  level: string
  compact: boolean
}>(({ onUpgrade, level, compact }) => {
  const buttonText = useMemo(() => {
    switch (level) {
      case 'critical': return compact ? '–ö—É–ø–∏—Ç—å' : '–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã'
      case 'warning': return compact ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ'
      default: return compact ? 'Upgrade' : '–ü—Ä–µ–º–∏—É–º'
    }
  }, [level, compact])

  const buttonClass = useMemo(() => {
    const baseClass = 'transition-all duration-200 font-medium rounded px-3 py-1 text-sm'
    const levelClass = level === 'critical' 
      ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse'
      : 'bg-purple-500 hover:bg-purple-600 text-white hover:scale-105'
    
    return `${baseClass} ${levelClass}`
  }, [level])

  return (
    <button
      onClick={onUpgrade}
      className={buttonClass}
      aria-label={`${buttonText} - —É–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω`}
    >
      {buttonText}
    </button>
  )
})
UpgradeButton.displayName = 'UpgradeButton'

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const OptimizedTokenCounter: React.FC<OptimizedTokenCounterProps> = memo(({
  userId = '',
  onUpgrade = () => {},
  compact = false,
  showDetails = false,
  className = ''
}) => {
  const counterRef = useRef<HTMLDivElement>(null)
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceStats = usePerformanceMonitor('OptimizedTokenCounter')
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const { isIntersecting } = useIntersectionObserver(counterRef, {
    threshold: 0.1,
    rootMargin: '50px'
  })
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  const paymentUrls = useMemo(() => [
    '/api/payments/create-intent',
    '/api/payments/stripe-checkout'
  ], [])
  
  usePrefetch(paymentUrls, isIntersecting)
  
  // –ú–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ store)
  const mockTokenState = useMemo<TokenState>(() => ({
    used: userId ? 750 : 0,
    limit: userId ? 1000 : 0,
    isLoading: false,
    isPremium: false,
    lastUpdated: new Date()
  }), [userId])
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const tokenUsage = useMemoizedSelector(selectTokenUsage, mockTokenState)
  const tokenStatus = useMemoizedSelector(selectTokenStatus, mockTokenState)
  
  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const debouncedUsage = useDebounce(tokenUsage, 500)
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const displayText = useCachedComputation(
    (used: number, limit: number, isPremium: boolean) => {
      if (!userId) return '–í–æ–π—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
      if (isPremium) return `${used.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤ (‚àû)`
      return `${used.toLocaleString()} / ${limit.toLocaleString()}`
    },
    [debouncedUsage.used, debouncedUsage.limit, debouncedUsage.isPremium],
    30000 // 30 —Å–µ–∫—É–Ω–¥ TTL
  )
  
  // –¢—Ä–æ—Ç—Ç–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const throttledUpgrade = useThrottle(onUpgrade, 1000)
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
  const handleUpgradeClick = useCallback(() => {
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–∫–∞
    console.log('üìä TokenCounter upgrade clicked', {
      userId,
      currentUsage: debouncedUsage.used,
      limit: debouncedUsage.limit,
      level: tokenStatus.level,
      timestamp: new Date().toISOString()
    })
    
    throttledUpgrade()
  }, [userId, debouncedUsage.used, debouncedUsage.limit, tokenStatus.level, throttledUpgrade])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const containerClass = useMemo(() => {
    const baseClass = 'flex items-center space-x-2 transition-all duration-300'
    const compactClass = compact ? 'text-sm' : 'text-base'
    const statusClass = tokenStatus.level === 'critical' ? 'animate-pulse' : ''
    
    return `${baseClass} ${compactClass} ${statusClass} ${className}`.trim()
  }, [compact, tokenStatus.level, className])
  
  // –õ–µ–Ω–∏–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  if (!isIntersecting && performanceStats.renderCount > 1) {
    return (
      <div ref={counterRef} className={containerClass}>
        <span className="text-gray-400">‚óè‚óè‚óè</span>
      </div>
    )
  }
  
  // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  if (!userId) {
    return (
      <div ref={counterRef} className={containerClass}>
        <span className="text-gray-600">
          {compact ? '–í–æ–π—Ç–∏' : '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤'}
        </span>
      </div>
    )
  }
  
  const showUpgradeButton = !debouncedUsage.isPremium && 
    (tokenStatus.level === 'critical' || tokenStatus.level === 'warning')
  
  return (
    <div ref={counterRef} className={containerClass}>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ */}
      <div className="flex items-center space-x-2">
        <div 
          className={`w-2 h-2 rounded-full`}
          style={{ backgroundColor: tokenStatus.color }}
          title={tokenStatus.message}
        />
        <span className="font-medium">
          {displayText}
        </span>
      </div>
      
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      {!compact && debouncedUsage.limit > 0 && (
        <div className="min-w-[60px]">
          <ProgressBar 
            percentage={debouncedUsage.percentage}
            color={tokenStatus.color}
            animated={tokenStatus.level === 'critical'}
          />
        </div>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      {showUpgradeButton && (
        <UpgradeButton
          onUpgrade={handleUpgradeClick}
          level={tokenStatus.level}
          compact={compact}
        />
      )}
      
      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showDetails && !compact && (
        <div className="text-xs text-gray-500">
          <div>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {debouncedUsage.lastUpdated?.toLocaleTimeString()}</div>
          {process.env.NODE_ENV === 'development' && (
            <div>–†–µ–Ω–¥–µ—Ä—ã: {performanceStats.renderCount}</div>
          )}
        </div>
      )}
    </div>
  )
})

OptimizedTokenCounter.displayName = 'OptimizedTokenCounter'

export default OptimizedTokenCounter 