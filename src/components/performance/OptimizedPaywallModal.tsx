// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PaywallModal –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// –§–æ–∫—É—Å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏

import React, { memo, useState, useCallback, useMemo, useRef, useEffect, Suspense } from 'react'
import { 
  useDebounce, 
  useLazyLoad, 
  usePerformanceMonitor,
  usePrefetch,
  useCachedComputation,
  useBatchedState
} from '../../lib/hooks/usePerformanceOptimization'

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const LazyStripeElements = React.lazy(() => 
  import('../payments/StripeElements').catch(() => ({ 
    default: () => <div>Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div> 
  }))
)

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
interface OptimizedPaywallModalProps {
  isOpen: boolean
  type: 'token_limit' | 'mascot' | 'premium_subscription'
  cost: number
  onClose: () => void
  onPaymentSuccess?: (paymentIntent: any) => void
  variant?: string
  userId?: string
  className?: string
}

interface PaymentState {
  step: 'selection' | 'payment' | 'processing' | 'success' | 'error'
  isLoading: boolean
  error: string | null
  paymentIntent: any
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const PRODUCT_CONFIGS = {
  token_limit: {
    title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã',
    description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 2000 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ò–ò',
    icon: 'üî•',
    benefits: ['2000 —Ç–æ–∫–µ–Ω–æ–≤', '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
    urgency: '–õ–∏–º–∏—Ç —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!'
  },
  mascot: {
    title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Å–∫–æ—Ç',
    description: '–ò–ò —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å',
    icon: 'üé®',
    benefits: ['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', 'HD –∫–∞—á–µ—Å—Ç–≤–æ', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'],
    urgency: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞!'
  },
  premium_subscription: {
    title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
    description: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    icon: 'üëë',
    benefits: ['–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã', '–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏', 'VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø'],
    urgency: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —ç–ª–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
  }
} as const

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
const CloseButton = memo<{ onClose: () => void }>(({ onClose }) => (
  <button
    onClick={onClose}
    className="absolute top-4 right-4 w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 transition-colors duration-200 z-10"
    aria-label="–ó–∞–∫—Ä—ã—Ç—å modal"
  >
    <span className="text-gray-600 text-lg">√ó</span>
  </button>
))
CloseButton.displayName = 'CloseButton'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingSpinner = memo(() => (
  <div className="flex items-center justify-center space-x-2">
    <div className="w-4 h-4 border-2 border-purple-600 border-t-transparent rounded-full animate-spin" />
    <span>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</span>
  </div>
))
LoadingSpinner.displayName = 'LoadingSpinner'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
const BenefitsList = memo<{ benefits: string[] }>(({ benefits }) => (
  <ul className="space-y-2 mb-6">
    {benefits.map((benefit, index) => (
      <li key={index} className="flex items-center space-x-2">
        <span className="text-green-500 text-sm">‚úì</span>
        <span className="text-sm text-gray-700">{benefit}</span>
      </li>
    ))}
  </ul>
))
BenefitsList.displayName = 'BenefitsList'

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const OptimizedPaywallModal: React.FC<OptimizedPaywallModalProps> = memo(({
  isOpen,
  type,
  cost,
  onClose,
  onPaymentSuccess = () => {},
  variant = 'control',
  userId = '',
  className = ''
}) => {
  const modalRef = useRef<HTMLDivElement>(null)
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceStats = usePerformanceMonitor('OptimizedPaywallModal')
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
  const [paymentState, setPaymentState] = useBatchedState<PaymentState>({
    step: 'selection',
    isLoading: false,
    error: null,
    paymentIntent: null
  })
  
  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const debouncedCost = useDebounce(cost, 300)
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const productConfig = useCachedComputation(
    (productType: typeof type) => PRODUCT_CONFIGS[productType],
    [type],
    60000 // 1 –º–∏–Ω—É—Ç–∞ TTL
  )
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–ø–ª–∞—Ç—ã
  const paymentUrls = useMemo(() => [
    '/api/payments/create-intent',
    '/api/payments/stripe-public-key'
  ], [])
  
  usePrefetch(paymentUrls, isOpen)
  
  // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Stripe Elements
  const { 
    component: StripeElements, 
    isLoading: isStripeLoading 
  } = useLazyLoad(
    () => import('../payments/StripeElements'),
    [paymentState.step === 'payment']
  )
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å modal backdrop
  const backdropStyle = useMemo(() => ({
    display: isOpen ? 'flex' : 'none',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    backdropFilter: 'blur(4px)',
    transition: 'all 0.3s ease-in-out'
  }), [isOpen])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å modal content
  const modalStyle = useMemo(() => ({
    transform: isOpen ? 'scale(1) translateY(0)' : 'scale(0.95) translateY(20px)',
    opacity: isOpen ? 1 : 0,
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
  }), [isOpen])
  
  // –¢—Ä–æ—Ç—Ç–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
  const handlePurchase = useCallback(async () => {
    if (paymentState.isLoading) return
    
    console.log('üí≥ –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏', {
      type,
      cost: debouncedCost,
      variant,
      userId,
      timestamp: new Date().toISOString()
    })
    
    setPaymentState(prev => ({ 
      ...prev, 
      step: 'payment',
      isLoading: true,
      error: null 
    }))
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è payment intent
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const mockPaymentIntent = {
        id: `pi_${type}_${Date.now()}`,
        amount: debouncedCost * 100, // –í —Ü–µ–Ω—Ç–∞—Ö
        currency: 'usd',
        client_secret: `pi_${type}_secret_${Date.now()}`
      }
      
      setPaymentState(prev => ({
        ...prev,
        step: 'processing',
        paymentIntent: mockPaymentIntent,
        isLoading: false
      }))
      
      // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
      setTimeout(() => {
        setPaymentState(prev => ({ 
          ...prev, 
          step: 'success', 
          isLoading: false 
        }))
        
        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω', mockPaymentIntent)
        
        // –í—ã–∑—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          onPaymentSuccess(mockPaymentIntent)
          onClose()
        }, 2000)
      }, 2000)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', error)
      setPaymentState(prev => ({
        ...prev,
        step: 'error',
        isLoading: false,
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      }))
    }
  }, [type, debouncedCost, variant, userId, paymentState.isLoading, setPaymentState, onPaymentSuccess, onClose])
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
  const handleClose = useCallback(() => {
    console.log('üìä Modal –∑–∞–∫—Ä—ã—Ç', {
      type,
      step: paymentState.step,
      cost: debouncedCost,
      userId,
      timeOpen: performanceStats.timeSinceMount
    })
    
    onClose()
  }, [type, paymentState.step, debouncedCost, userId, performanceStats.timeSinceMount, onClose])
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ backdrop
  const handleBackdropClick = useCallback((e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      handleClose()
    }
  }, [handleClose])
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º modal
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
      return () => {
        document.body.style.overflow = 'unset'
      }
    }
  }, [isOpen])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —à–∞–≥–∞–º
  const stepContent = useMemo(() => {
    switch (paymentState.step) {
      case 'selection':
        return (
          <div className="space-y-6">
            <div className="text-center">
              <div className="text-4xl mb-2">{productConfig.icon}</div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                {productConfig.title}
              </h2>
              <p className="text-gray-600 mb-4">
                {productConfig.description}
              </p>
              <div className="text-3xl font-bold text-purple-600 mb-2">
                ${debouncedCost.toFixed(2)}
              </div>
              <div className="text-sm text-orange-600 font-medium">
                {productConfig.urgency}
              </div>
            </div>
            
            <BenefitsList benefits={productConfig.benefits} />
            
            <button
              onClick={handlePurchase}
              disabled={paymentState.isLoading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]"
            >
              {paymentState.isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ö—É–ø–∏—Ç—å –∑–∞ $${debouncedCost.toFixed(2)}`}
            </button>
            
            <div className="text-xs text-gray-500 text-center">
              –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stripe ‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π
            </div>
          </div>
        )
        
      case 'payment':
      case 'processing':
        return (
          <div className="text-center space-y-6">
            <LoadingSpinner />
            <div className="text-gray-600">
              {paymentState.step === 'payment' 
                ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞...' 
                : '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...'
              }
            </div>
            <Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã...</div>}>
              {StripeElements && (
                <StripeElements
                  clientSecret={paymentState.paymentIntent?.client_secret}
                  onSuccess={onPaymentSuccess}
                />
              )}
            </Suspense>
          </div>
        )
        
      case 'success':
        return (
          <div className="text-center space-y-6">
            <div className="text-6xl">üéâ</div>
            <h2 className="text-2xl font-bold text-green-600">
              –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!
            </h2>
            <p className="text-gray-600">
              –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à {productConfig.title.toLowerCase()} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
            </p>
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="text-sm text-green-800">
                <strong>–ü–æ–∫—É–ø–∫–∞:</strong> {productConfig.title}<br/>
                <strong>–°—É–º–º–∞:</strong> ${debouncedCost.toFixed(2)}<br/>
                <strong>ID:</strong> {paymentState.paymentIntent?.id}
              </div>
            </div>
          </div>
        )
        
      case 'error':
        return (
          <div className="text-center space-y-6">
            <div className="text-6xl">üòî</div>
            <h2 className="text-2xl font-bold text-red-600">
              –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
            </h2>
            <p className="text-gray-600">
              {paymentState.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'}
            </p>
            <button
              onClick={() => setPaymentState(prev => ({ ...prev, step: 'selection', error: null }))}
              className="bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            </button>
          </div>
        )
        
      default:
        return null
    }
  }, [paymentState, productConfig, debouncedCost, handlePurchase, StripeElements, onPaymentSuccess, setPaymentState])
  
  // –†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ modal
  if (!isOpen) {
    return null
  }
  
  return (
    <div
      className={`fixed inset-0 z-50 flex items-center justify-center p-4 ${className}`}
      style={backdropStyle}
      onClick={handleBackdropClick}
    >
      <div
        ref={modalRef}
        className="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto relative"
        style={modalStyle}
        onClick={(e) => e.stopPropagation()}
      >
        <CloseButton onClose={handleClose} />
        
        <div className="p-6">
          {stepContent}
        </div>
        
        {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ dev —Ä–µ–∂–∏–º–µ */}
        {process.env.NODE_ENV === 'development' && (
          <div className="p-2 bg-gray-100 text-xs text-gray-600 border-t">
            <div>–†–µ–Ω–¥–µ—Ä—ã: {performanceStats.renderCount}</div>
            <div>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {performanceStats.timeSinceMount}ms</div>
            <div>–®–∞–≥: {paymentState.step}</div>
            <div>–í–∞—Ä–∏–∞–Ω—Ç: {variant}</div>
          </div>
        )}
      </div>
    </div>
  )
})

OptimizedPaywallModal.displayName = 'OptimizedPaywallModal'

export default OptimizedPaywallModal 