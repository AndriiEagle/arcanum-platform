'use client'

import { useUIStore } from '../../../lib/stores/uiStore'
import { useCurrentUserId } from '../../../lib/stores/authStore'
import { useState, useEffect } from 'react'
import { createClient } from '../../../lib/supabase/client'

interface SidePanelProps {
  position: 'left' | 'right';
}

interface Sphere {
  id: string
  name: string
  health_percentage: number
  icon: string
}

interface ProgrammableButton {
  id: string
  label: string
  action: string
  icon: string
  isActive: boolean
}

interface Category {
  id: string
  name: string
  type: 'skill' | 'ability' | 'custom'
  progress: number
}

export default function SidePanel({ position }: SidePanelProps) {
  const { 
    isLeftPanelOpen, 
    isRightPanelOpen, 
    toggleLeftPanel, 
    toggleRightPanel 
  } = useUIStore()
  
  const userId = useCurrentUserId()
  const [spheres, setSpheres] = useState<Sphere[]>([])
  const [isLoadingSpheres, setIsLoadingSpheres] = useState(false)
  const [programmableButtons, setProgrammableButtons] = useState<ProgrammableButton[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [showAddButton, setShowAddButton] = useState(false)
  const [newButtonLabel, setNewButtonLabel] = useState('')
  
  const isOpen = position === 'left' ? isLeftPanelOpen : isRightPanelOpen
  const togglePanel = position === 'left' ? toggleLeftPanel : toggleRightPanel
  
  const supabase = createClient()
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (userId && position === 'left') {
      loadUserSpheres()
      loadProgrammableButtons()
      loadCategories()
    }
  }, [userId, position])
  
  const loadUserSpheres = async () => {
    if (!userId) return
    
    setIsLoadingSpheres(true)
    try {
      const { data, error } = await supabase
        .from('life_spheres')
        .select('id, sphere_name, health_percentage')
        .eq('user_id', userId)
        .order('sphere_name')
      
      if (error) {
        console.error('Error loading spheres:', error)
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setSpheres([
          { id: '1', name: '–ó–¥–æ—Ä–æ–≤—å–µ', health_percentage: 78, icon: 'üí™' },
          { id: '2', name: '–ö–∞—Ä—å–µ—Ä–∞', health_percentage: 92, icon: 'üíº' },
          { id: '3', name: '–§–∏–Ω–∞–Ω—Å—ã', health_percentage: 88, icon: 'üí∞' },
          { id: '4', name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', health_percentage: 65, icon: '‚ù§Ô∏è' },
          { id: '5', name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', health_percentage: 73, icon: 'üìö' }
        ])
      } else if (data && data.length > 0) {
        const mappedSpheres = data.map((sphere: { id: string; sphere_name: string; health_percentage: number }) => ({
          id: sphere.id,
          name: sphere.sphere_name,
          health_percentage: sphere.health_percentage,
          icon: getSphereIcon(sphere.sphere_name)
        }))
        setSpheres(mappedSpheres)
      } else {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setSpheres([
          { id: '1', name: '–ó–¥–æ—Ä–æ–≤—å–µ', health_percentage: 50, icon: 'üí™' },
          { id: '2', name: '–ö–∞—Ä—å–µ—Ä–∞', health_percentage: 50, icon: 'üíº' },
          { id: '3', name: '–§–∏–Ω–∞–Ω—Å—ã', health_percentage: 50, icon: 'üí∞' }
        ])
      }
    } catch (error) {
      console.error('Error in loadUserSpheres:', error)
    } finally {
      setIsLoadingSpheres(false)
    }
  }

  const loadProgrammableButtons = async () => {
    if (!userId) return
    
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ë–î
      setProgrammableButtons([
        { id: '1', label: '–ö–≤–µ—Å—Ç—ã', action: 'open_quests', icon: 'üéØ', isActive: true },
        { id: '2', label: '–°—Ç–∞—Ç—ã', action: 'show_stats', icon: 'üìä', isActive: true },
        { id: '3', label: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', action: 'open_inventory', icon: 'üéí', isActive: true }
      ])
    } catch (error) {
      console.error('Error loading programmable buttons:', error)
    }
  }

  const loadCategories = async () => {
    if (!userId) return
    
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setCategories([
        { id: '1', name: '–§–∏–∑–∏—á–µ—Å–∫–∏–µ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', type: 'ability', progress: 78 },
        { id: '2', name: '–ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ù–∞–≤—ã–∫–∏', type: 'skill', progress: 92 },
        { id: '3', name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –°–≤—è–∑–∏', type: 'skill', progress: 65 },
        { id: '4', name: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –¢–∞–ª–∞–Ω—Ç—ã', type: 'ability', progress: 45 }
      ])
    } catch (error) {
      console.error('Error loading categories:', error)
    }
  }
  
  const getSphereIcon = (sphereName: string): string => {
    const iconMap: Record<string, string> = {
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'üí™', '–ö–∞—Ä—å–µ—Ä–∞': 'üíº', '–û—Ç–Ω–æ—à–µ–Ω–∏—è': '‚ù§Ô∏è', '–§–∏–Ω–∞–Ω—Å—ã': 'üí∞',
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 'üìö', '–•–æ–±–±–∏': 'üé®', '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å': 'üßò', '–°–µ–º—å—è': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      '–î—Ä—É–∑—å—è': 'üë•', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '‚úàÔ∏è', '–ñ–∏–ª—å–µ': 'üè†', '–≠–∫–æ–ª–æ–≥–∏—è': 'üå±'
    }
    return iconMap[sphereName] || '‚≠ê'
  }

  const handleButtonAction = (action: string) => {
    console.log(`Executing action: ${action}`)
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
    switch (action) {
      case 'open_quests':
        // –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤
        break
      case 'show_stats':
        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        break
      case 'open_inventory':
        // –û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        break
      default:
        console.log('Unknown action:', action)
    }
  }

  const addNewButton = async () => {
    if (!newButtonLabel.trim()) return
    
    const newButton: ProgrammableButton = {
      id: `btn_${Date.now()}`,
      label: newButtonLabel,
      action: 'custom_action',
      icon: '‚ö°',
      isActive: true
    }
    
    setProgrammableButtons(prev => [...prev, newButton])
    setNewButtonLabel('')
    setShowAddButton(false)
    
    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Ç–∞–±–ª–∏—Ü–∞ programmable_buttons
  }

  return (
    <div className={`
      bg-gray-800 border-r border-gray-700 transition-all duration-300 ease-in-out relative
      ${isOpen ? 'w-[15%]' : 'w-[5%]'}
    `}>
      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è */}
      <button 
        onClick={togglePanel}
        className="absolute -right-3 top-4 w-6 h-6 bg-purple-600 hover:bg-purple-700 rounded-full flex items-center justify-center text-white text-xs transition-colors z-10"
        title={isOpen ? '–°–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å'}
      >
        {isOpen ? '‚óÄ' : '‚ñ∂'}
      </button>
    
      <div className={`p-4 ${!isOpen && 'px-2'}`}>
        {isOpen ? (
          <>
            <h2 className="text-lg font-semibold text-gray-300 mb-4">
              {position === 'left' ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : '–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å'}
            </h2>
            
            {/* –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏ */}
            <div className="mb-6">
              <h3 className="text-sm font-medium text-gray-400 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="grid grid-cols-2 gap-2 mb-4">
                {programmableButtons.map((button) => (
                  <button 
                    key={button.id}
                    onClick={() => handleButtonAction(button.action)}
                    className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 p-2 rounded text-sm font-medium transition-all duration-200 transform hover:scale-105"
                    title={`–î–µ–π—Å—Ç–≤–∏–µ: ${button.action}`}
                  >
                    {button.icon} {button.label}
                  </button>
                ))}
                <button 
                  onClick={() => setShowAddButton(true)}
                  className="bg-gray-700 hover:bg-gray-600 p-2 rounded text-sm text-gray-400 hover:text-white transition-colors border-2 border-dashed border-gray-600"
                  title="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É"
                >
                  ‚ûï
                </button>
              </div>

              {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ */}
              {showAddButton && (
                <div className="bg-gray-750 p-3 rounded mb-4">
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"
                    value={newButtonLabel}
                    onChange={(e) => setNewButtonLabel(e.target.value)}
                    className="w-full bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm text-white mb-2"
                  />
                  <div className="flex space-x-2">
                    <button
                      onClick={addNewButton}
                      className="bg-green-600 hover:bg-green-700 px-3 py-1 rounded text-xs"
                    >
                      ‚úì
                    </button>
                    <button
                      onClick={() => {setShowAddButton(false); setNewButtonLabel('')}}
                      className="bg-red-600 hover:bg-red-700 px-3 py-1 rounded text-xs"
                    >
                      ‚úó
                    </button>
                  </div>
                </div>
              )}
              
              {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-gray-400 mb-2">–†–∞–∑–≤–∏—Ç–∏–µ</h3>
                {categories.map((category) => (
                  <div key={category.id} className="bg-gray-750 p-2 rounded hover:bg-gray-700 transition-colors cursor-pointer">
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-sm text-gray-300">{category.name}</span>
                      <span className="text-xs text-gray-500">{category.progress}%</span>
                    </div>
                    <div className="w-full bg-gray-600 rounded-full h-1">
                      <div 
                        className={`h-1 rounded-full transition-all duration-300 ${
                          category.type === 'ability' ? 'bg-gradient-to-r from-red-500 to-orange-500' : 'bg-gradient-to-r from-blue-500 to-purple-500'
                        }`}
                        style={{ width: `${category.progress}%` }}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* –°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ */}
            <div className="flex-1 mb-6">
              <h3 className="text-sm font-medium text-gray-400 mb-2">–°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏</h3>
              {isLoadingSpheres ? (
                <div className="flex items-center justify-center py-4">
                  <div className="w-6 h-6 border-2 border-purple-500 border-t-transparent rounded-full animate-spin"></div>
                </div>
              ) : (
                <div className="space-y-2 max-h-40 overflow-y-auto custom-scrollbar">
                  {spheres.map((sphere) => (
                    <div key={sphere.id} className="flex items-center space-x-2 p-2 bg-gray-750 rounded hover:bg-gray-700 transition-colors cursor-pointer">
                      <span className="text-lg">{sphere.icon}</span>
                      <div className="flex-1 min-w-0">
                        <div className="text-sm text-white truncate">{sphere.name}</div>
                        <div className="w-full bg-gray-600 rounded-full h-1 mt-1">
                          <div 
                            className={`h-1 rounded-full transition-all duration-300 ${
                              sphere.health_percentage >= 80 ? 'bg-green-500' :
                              sphere.health_percentage >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                            }`}
                            style={{ width: `${sphere.health_percentage}%` }}
                          />
                        </div>
                      </div>
                      <span className="text-xs text-gray-400">{sphere.health_percentage}%</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            {/* –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <div className="space-y-2">
              <button className="w-full bg-gray-700 hover:bg-gray-600 p-2 rounded text-sm text-left transition-colors">
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </button>
              <button className="w-full bg-gray-700 hover:bg-gray-600 p-2 rounded text-sm text-left transition-colors">
                üë§ –ü—Ä–æ—Ñ–∏–ª—å
              </button>
              <button className="w-full bg-gray-700 hover:bg-gray-600 p-2 rounded text-sm text-left transition-colors">
                ‚ùì –ü–æ–º–æ—â—å
              </button>
            </div>
          </>
        ) : (
          /* –°–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∏ */
          <div className="space-y-3">
            {programmableButtons.slice(0, 3).map((button) => (
              <button 
                key={button.id}
                onClick={() => handleButtonAction(button.action)}
                className="w-full aspect-square bg-purple-600 hover:bg-purple-700 rounded flex items-center justify-center text-lg transition-colors"
                title={button.label}
              >
                {button.icon}
              </button>
            ))}
          </div>
        )}
      </div>
      
      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: #374151;
          border-radius: 2px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: #6B7280;
          border-radius: 2px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: #9CA3AF;
        }
      `}</style>
    </div>
  )
} 