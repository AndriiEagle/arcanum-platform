'use client'

import { useState, useEffect } from 'react'
import { useUIStore } from '../../../lib/stores/uiStore'

interface HeaderImageWidgetProps {
  onError?: (error: string) => void
}

export default function HeaderImageWidget({ onError }: HeaderImageWidgetProps = {}) {
  const [imageUrl, setImageUrl] = useState<string | null>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [currentPrompt, setCurrentPrompt] = useState<string>('')
  const { autoGenerateHeaderImage } = useUIStore()

  const defaultPrompt = "–≠–ø–∏—á–µ—Å–∫–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Ä—Ç, –∏–∑–æ–±—Ä–∞–∂–∞—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –ø–∏—Å–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –Ω–∞ –≥–∏—Ç–∞—Ä–µ –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ –≥–æ—Ä—ã, –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫"

  const generateImage = async (customPrompt?: string) => {
    const promptToUse = customPrompt || defaultPrompt
    setCurrentPrompt(promptToUse)
    setIsGenerating(true)
    setError(null)

    try {
      const response = await fetch('/api/generate-header', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: promptToUse }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate image')
      }

      setImageUrl(data.imageUrl)
      console.log('Image generated successfully:', data.imageUrl)
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      setError(errorMessage)
      onError?.(errorMessage)
      console.error('Error generating image:', err)
    } finally {
      setIsGenerating(false)
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (autoGenerateHeaderImage) {
      generateImage()
    }
  }, [])

  return (
    <div className="bg-gradient-to-br from-purple-900/90 to-blue-900/90 backdrop-blur-sm rounded-lg p-6 border border-purple-700 shadow-2xl min-w-[400px] max-w-[500px]">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∂–µ—Ç–∞ */}
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-bold text-white flex items-center">
          <span className="mr-2">üñºÔ∏è</span>
          –≠–ø–∏—á–µ—Å–∫–∞—è –®–∞–ø–∫–∞
        </h3>
        <button
          onClick={() => generateImage()}
          disabled={isGenerating}
          className={`
            px-3 py-1.5 rounded text-sm font-medium transition-all duration-200
            ${isGenerating 
              ? 'bg-gray-600 text-gray-400 cursor-not-allowed' 
              : 'bg-purple-600 hover:bg-purple-700 text-white hover:scale-105'
            }
          `}
        >
          {isGenerating ? 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚ú® –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
        </button>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <div className="relative bg-gray-800/50 rounded-lg overflow-hidden mb-4 min-h-[200px] flex items-center justify-center">
        {isGenerating ? (
          <div className="flex flex-col items-center space-y-4">
            <div className="w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin"></div>
            <div className="text-center">
              <p className="text-white font-medium">üé® –ò–ò —Å–æ–∑–¥–∞—ë—Ç —à–µ–¥–µ–≤—Ä...</p>
              <p className="text-gray-400 text-sm mt-1">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥</p>
            </div>
          </div>
        ) : error ? (
          <div className="text-center p-4">
            <div className="text-red-400 text-4xl mb-2">‚ö†Ô∏è</div>
            <p className="text-red-300 font-medium mb-2">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
            <p className="text-red-200 text-sm break-words">{error}</p>
            <button
              onClick={() => generateImage()}
              className="mt-3 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded text-sm transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        ) : imageUrl ? (
          <div className="relative group">
            <img 
              src={imageUrl} 
              alt="AI-generated header" 
              className="w-full h-auto rounded transition-transform group-hover:scale-[1.02]"
              style={{ maxHeight: '300px', objectFit: 'cover' }}
            />
            <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors rounded"></div>
          </div>
        ) : (
          <div className="text-center p-4">
            <div className="text-gray-400 text-4xl mb-2">üé®</div>
            <p className="text-gray-300">–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ */}
      <div className="bg-gray-800/30 rounded p-3 mb-3">
        <p className="text-xs text-gray-400 mb-1">–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</p>
        <p className="text-sm text-gray-300 leading-relaxed">{currentPrompt || '–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω'}</p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="flex justify-between items-center text-xs text-gray-400">
        <span>–í–µ—Ä—Å–∏—è: DALL-E 3</span>
        <span>–†–∞–∑–º–µ—Ä: 1024√ó1024</span>
        <span>–ö–∞—á–µ—Å—Ç–≤–æ: –°—Ç–∞–Ω–¥–∞—Ä—Ç</span>
      </div>
    </div>
  )
} 