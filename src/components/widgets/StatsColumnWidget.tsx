'use client'

import { useState, useEffect, useCallback, useRef } from 'react'
import { createClient } from '../../../lib/supabase/client'
import { useCurrentUserId } from '../../../lib/stores/authStore'
import SphereHealthBar from './SphereHealthBar'
import SphereDevelopmentTree from '../modals/SphereDevelopmentTree'
import PaywallModal from '../payments/PaywallModal'
import { getSphereIcons, setSphereIcon } from '../../../lib/services/customizationService'
import { uploadImageResized } from '../../../lib/services/imageUpload'

interface Sphere {
  id: string
  name: string
  health_percentage: number
  color: string
  icon: string
  global_goal?: string
}

interface UserStats {
  level: number
  currentXP: number
  nextLevelXP: number
  energy: number
  hourlyIncome: number
  financialGoal: number
}

interface Task {
  id: string
  title: string
  priority: 'high' | 'medium' | 'low'
  status: 'active' | 'completed' | 'in_progress'
}

interface Buff {
  id: string
  name: string
  type: 'buff' | 'debuff'
  description: string
  duration: string
}

export default function StatsColumnWidget() {
  const userId = useCurrentUserId()
  console.log('[DBG][StatsColumnWidget] render', { userId })
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
  const [userStats, setUserStats] = useState<UserStats>({
    level: 15,
    currentXP: 2340,
    nextLevelXP: 3000,
    energy: 85,
    hourlyIncome: 45.50,
    financialGoal: 2000
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
  const [spheres, setSpheres] = useState<Sphere[]>([])

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á
  const [tasks, setTasks] = useState<Task[]>([
    { id: '1', title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è 15 –º–∏–Ω', priority: 'high', status: 'in_progress' },
    { id: '2', title: '–ö–æ–¥-—Ä–µ–≤—å—é –ø—Ä–æ–µ–∫—Ç–∞', priority: 'high', status: 'active' },
    { id: '3', title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ', priority: 'medium', status: 'active' },
    { id: '4', title: '–ó–≤–æ–Ω–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º', priority: 'medium', status: 'active' },
    { id: '5', title: '–ß—Ç–µ–Ω–∏–µ 30 —Å—Ç—Ä–∞–Ω–∏—Ü', priority: 'low', status: 'active' }
  ])

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞—Ñ—Ñ–æ–≤/–¥–µ–±–∞—Ñ—Ñ–æ–≤
  const [buffs, setBuffs] = useState<Buff[]>([
    { id: '1', name: '–ë–æ–¥—Ä–æ—Å—Ç—å', type: 'buff', description: '–ü–æ—Å–ª–µ –ª–µ–¥—è–Ω–æ–π –≤–∞–Ω–Ω—ã', duration: '2—á' },
    { id: '2', name: '–§–æ–∫—É—Å', type: 'buff', description: 'Deep Work —Ä–µ–∂–∏–º', duration: '45–º' },
    { id: '3', name: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', type: 'debuff', description: '–ù–µ–¥–æ—Å—ã–ø –≤—á–µ—Ä–∞', duration: '4—á' }
  ])

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
  const [selectedSphereForTree, setSelectedSphereForTree] = useState<Sphere | null>(null)
  const [isTreeModalOpen, setIsTreeModalOpen] = useState(false)
 
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã
  const [isAddSphereOpen, setIsAddSphereOpen] = useState(false)
  const [newSphereName, setNewSphereName] = useState('')
  const [isCreatingSphere, setIsCreatingSphere] = useState(false)
  const [createSphereError, setCreateSphereError] = useState<string | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Å—Ç–∞—Ä–æ–µ)
  const [selectedSphere, setSelectedSphere] = useState<Sphere | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Paywall Modal (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–æ—Ç–æ–≤)
  const [showMascotPaywall, setShowMascotPaywall] = useState(false)
  const [generatedMascot, setGeneratedMascot] = useState<string | null>(null)
  const [isGeneratingMascot, setIsGeneratingMascot] = useState(false)

  const [sphereIconUrls, setSphereIconUrls] = useState<Record<string, string>>({})
  const fileInputRefs = useRef<Record<string, HTMLInputElement | null>>({})

  // Supabase client should be created inside functions to keep stable deps and avoid re-renders

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä –∏–∑ Supabase
  const loadSpheresFromSupabase = useCallback(async () => {
    console.log('[DBG][StatsColumnWidget] loadSpheresFromSupabase start', { userId })
    try {
      setIsLoading(true)
      if (!userId) {
        console.log('User not authenticated, using static spheres data')
        setIsLoading(false)
        return
      }
      const supabase = createClient()
      const { data, error } = await supabase
        .from('life_spheres')
        .select('*')
        .eq('user_id', userId)

      if (error && error.code !== 'PGRST116') {
        console.error('Error loading spheres:', error)
        return
      }

      if (data && data.length > 0) {
        console.log('[DBG][StatsColumnWidget] spheres loaded', data.length)
        const mappedSpheres = data.map((sphere: any) => ({
          id: sphere.id,
          name: sphere.sphere_name,
          health_percentage: sphere.health_percentage,
          color: 'blue',
          icon: getSphereIcon(sphere.sphere_name),
          global_goal: sphere.global_goal
        }))
        setSpheres(mappedSpheres)
      }
    } catch (error) {
      console.error('Error in loadSpheresFromSupabase:', error)
    } finally {
      console.log('[DBG][StatsColumnWidget] loadSpheresFromSupabase end')
      setIsLoading(false)
    }
  }, [userId])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Å—Ñ–µ—Ä—ã
  const getSphereIcon = (sphereName: string): string => {
    const iconMap: Record<string, string> = {
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'üí™', '–ö–∞—Ä—å–µ—Ä–∞': 'üíº', '–û—Ç–Ω–æ—à–µ–Ω–∏—è': '‚ù§Ô∏è', '–§–∏–Ω–∞–Ω—Å—ã': 'üí∞',
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 'üìö', '–•–æ–±–±–∏': 'üé®', '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å': 'üßò', '–°–µ–º—å—è': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      '–î—Ä—É–∑—å—è': 'üë•', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '‚úàÔ∏è', '–ñ–∏–ª—å–µ': 'üè†', '–≠–∫–æ–ª–æ–≥–∏—è': 'üå±'
    }
    return iconMap[sphereName] || '‚≠ê'
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Ñ–µ—Ä–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ä–∞–∑–≤–∏—Ç–∏—è
  const handleSphereClick = (sphere: Sphere) => {
    setSelectedSphereForTree(sphere)
    setIsTreeModalOpen(true)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ñ–µ—Ä—ã —á–µ—Ä–µ–∑ Supabase –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ä–µ–≤–∞
  const handleCreateSphere = async () => {
    if (!userId) {
      alert('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ñ–µ—Ä—ã')
      return
    }
    const trimmed = newSphereName.trim()
    if (!trimmed) {
      setCreateSphereError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã')
      return
    }
    setIsCreatingSphere(true)
    setCreateSphereError(null)
    try {
      const supabase = createClient()
      const { data, error } = await supabase
        .from('life_spheres')
        .insert([{ user_id: userId, sphere_name: trimmed, health_percentage: 50 }])
        .select()
        .single()
      if (error) throw error

      const created: Sphere = {
        id: data.id,
        name: data.sphere_name,
        health_percentage: data.health_percentage || 50,
        color: 'blue',
        icon: getSphereIcon(data.sphere_name)
      }

      setSpheres(prev => [created, ...prev])
      setIsAddSphereOpen(false)
      setNewSphereName('')
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ ‚Äî –≤–Ω—É—Ç—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∑–∞–¥–∞—á–∏
      handleSphereClick(created)
    } catch (e: any) {
      setCreateSphereError(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ñ–µ—Ä—É')
    } finally {
      setIsCreatingSphere(false)
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
  const closeTreeModal = () => {
    setIsTreeModalOpen(false)
    setSelectedSphereForTree(null)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞ —Å paywall
  const handleGenerateMascot = () => {
    console.log('üé® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Å–∫–æ—Ç–∞')
    setShowMascotPaywall(true)
  }

  // –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –º–∞—Å–∫–æ—Ç–∞
  const handleMascotPaymentSuccess = async (paymentIntentId: string) => {
    console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –º–∞—Å–∫–æ—Ç–∞ —É—Å–ø–µ—à–Ω–∞:', paymentIntentId)
    setShowMascotPaywall(false)
    setIsGeneratingMascot(true)
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –≤—ã–∑–æ–≤ AI API)
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // –°–ª—É—á–∞–π–Ω—ã–µ –º–∞—Å–∫–æ—Ç—ã –¥–ª—è –¥–µ–º–æ
      const mascots = [
        'üê± –ö–æ—Ç-–≤–æ–∏–Ω —Å –º–µ—á–æ–º',
        'ü¶ä –ú—É–¥—Ä–∞—è –ª–∏—Å–∞-–º–∞–≥',
        'üê∫ –í–æ–ª–∫-—Å–ª–µ–¥–æ–ø—ã—Ç',
        'ü¶Ö –û—Ä–µ–ª-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
        'üêâ –î—Ä–∞–∫–æ–Ω-–∑–∞—â–∏—Ç–Ω–∏–∫',
        'ü¶Ñ –ï–¥–∏–Ω–æ—Ä–æ–≥-—Ü–µ–ª–∏—Ç–µ–ª—å',
        'üêØ –¢–∏–≥—Ä-–±–µ—Ä—Å–µ—Ä–∫',
        'üêß –ü–∏–Ω–≥–≤–∏–Ω-–∞–ª—Ö–∏–º–∏–∫'
      ]
      
      const randomMascot = mascots[Math.floor(Math.random() * mascots.length)]
      setGeneratedMascot(randomMascot)
      
      console.log(`‚ú® –ú–∞—Å–∫–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${randomMascot}`)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞:', error)
    } finally {
      setIsGeneratingMascot(false)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('[DBG][StatsColumnWidget] effect mount -> loadSpheresFromSupabase')
    loadSpheresFromSupabase()
  }, [loadSpheresFromSupabase])

  useEffect(() => {
    (async () => {
      if (!userId) return
      console.log('[DBG][StatsColumnWidget] effect icons load for user', userId)
      const icons = await getSphereIcons(userId)
      setSphereIconUrls(icons)
    })()
  }, [userId])

  const openIconPicker = (sphereId: string) => {
    fileInputRefs.current[sphereId]?.click()
  }

  const handleIconSelected = async (sphereId: string, e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const file = e.target.files?.[0]
      if (!file || !userId) return
      const { url } = await uploadImageResized(file, { bucket: 'public-assets', pathPrefix: `sphere-icons/${userId}`, maxSize: 128 })
      await setSphereIcon(userId, sphereId, url)
      setSphereIconUrls(prev => ({ ...prev, [sphereId]: url }))
    } catch (err) {
      console.error('Sphere icon upload error:', err)
    } finally {
      if (fileInputRefs.current[sphereId]) fileInputRefs.current[sphereId]!.value = ''
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityColor = (priority: string): string => {
    switch (priority) {
      case 'high': return 'text-red-400 bg-red-900/30'
      case 'medium': return 'text-yellow-400 bg-yellow-900/30'
      case 'low': return 'text-green-400 bg-green-900/30'
      default: return 'text-gray-400 bg-gray-900/30'
    }
  }

  // –†–∞—Å—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ XP
  const xpPercentage = (userStats.currentXP / userStats.nextLevelXP) * 100

  return (
    <>
      <div className="bg-gradient-to-b from-gray-800/95 to-gray-900/95 backdrop-blur-sm rounded-lg p-6 border border-gray-700 shadow-2xl min-w-[320px] max-w-[400px] h-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-white flex items-center">
            <span className="mr-2">üìä</span>
            –ö–æ–º–∞–Ω–¥–Ω—ã–π –¶–µ–Ω—Ç—Ä
          </h2>
          <button 
            onClick={loadSpheresFromSupabase}
            disabled={isLoading}
            className="text-xs text-gray-400 hover:text-white transition-colors"
          >
            {isLoading ? 'üîÑ' : '‚Üª'}
          </button>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <div className="space-y-4 mb-6">
          {/* –£—Ä–æ–≤–µ–Ω—å */}
          <div className="bg-gradient-to-r from-purple-900/50 to-purple-800/50 rounded-lg p-3">
            <div className="flex justify-between items-center mb-2">
              <span className="text-purple-300 font-medium">‚≠ê –£—Ä–æ–≤–µ–Ω—å</span>
              <span className="text-2xl font-bold text-white">{userStats.level}</span>
            </div>
            {/* XP Progress Bar */}
            <div className="w-full bg-gray-700 rounded-full h-3 overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-1000 ease-out relative"
                style={{ width: `${xpPercentage}%` }}
              >
                <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
              </div>
            </div>
            <div className="text-xs text-purple-200 mt-1">
              {userStats.currentXP.toLocaleString()} / {userStats.nextLevelXP.toLocaleString()} XP
            </div>
          </div>

          {/* –≠–Ω–µ—Ä–≥–∏—è */}
          <div className="bg-gradient-to-r from-green-900/50 to-green-800/50 rounded-lg p-3">
            <div className="flex justify-between items-center mb-2">
              <span className="text-green-300 font-medium">‚ö° –≠–Ω–µ—Ä–≥–∏—è</span>
              <span className="text-xl font-bold text-white">{userStats.energy}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full transition-all duration-700"
                style={{ width: `${userStats.energy}%` }}
              ></div>
            </div>
          </div>

          {/* –§–∏–Ω–∞–Ω—Å—ã */}
          <div className="bg-gradient-to-r from-yellow-900/50 to-yellow-800/50 rounded-lg p-3">
            <div className="flex justify-between items-center">
              <div>
                <div className="text-yellow-300 font-medium">üí∞ –î–æ—Ö–æ–¥/—á–∞—Å</div>
                <div className="text-lg font-bold text-white">${userStats.hourlyIncome}</div>
              </div>
              <div className="text-right">
                <div className="text-yellow-300 text-sm">–¶–µ–ª—å/–º–µ—Å—è—Ü</div>
                <div className="text-lg font-bold text-white">${userStats.financialGoal}</div>
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
            <span className="mr-2">üéØ</span>
            –ê–∫—Ç–∏–≤–Ω—ã–µ –ó–∞–¥–∞—á–∏
          </h3>
          <div className="space-y-2">
            {tasks.filter(task => task.status !== 'completed').slice(0, 4).map((task) => (
              <div key={task.id} className="flex items-center justify-between bg-gray-800/50 rounded p-2">
                <div className="flex items-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${task.status === 'in_progress' ? 'bg-blue-500 animate-pulse' : 'bg-gray-500'}`}></div>
                  <span className="text-sm text-gray-300">{task.title}</span>
                </div>
                <span className={`text-xs px-2 py-1 rounded ${getPriorityColor(task.priority)}`}>
                  {task.priority.toUpperCase()}
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã/–¥–µ–±–∞—Ñ—Ñ—ã */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
            <span className="mr-2">‚ú®</span>
            –≠—Ñ—Ñ–µ–∫—Ç—ã
          </h3>
          <div className="space-y-2">
            {buffs.map((buff) => (
              <div key={buff.id} className={`p-2 rounded-lg ${buff.type === 'buff' ? 'bg-green-900/30 border-l-4 border-green-500' : 'bg-red-900/30 border-l-4 border-red-500'}`}>
                <div className="flex justify-between items-start">
                  <div>
                    <div className={`font-medium text-sm ${buff.type === 'buff' ? 'text-green-300' : 'text-red-300'}`}>
                      {buff.type === 'buff' ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'} {buff.name}
                    </div>
                    <div className="text-xs text-gray-400">{buff.description}</div>
                  </div>
                  <span className="text-xs text-gray-500">{buff.duration}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –°—Ñ–µ—Ä—ã –ñ–∏–∑–Ω–∏ */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
            <span className="mr-2">üåê</span>
            –°—Ñ–µ—Ä—ã –ñ–∏–∑–Ω–∏ ({spheres.length}/12)
            <button
              onClick={() => setIsAddSphereOpen(true)}
              className="ml-auto text-xs px-2 py-1 bg-purple-700 hover:bg-purple-600 rounded"
              title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ñ–µ—Ä—É"
            >
              + –°—Ñ–µ—Ä–∞
            </button>
          </h3>
          <div className="space-y-1 max-h-80 overflow-y-auto custom-scrollbar">
            {spheres.map((sphere) => (
              <div key={sphere.id} className="flex items-center">
                <SphereHealthBar 
                  sphere={sphere} 
                  onClick={handleSphereClick}
                  iconUrl={sphereIconUrls[sphere.id]}
                  onUploadIcon={() => openIconPicker(sphere.id)}
                />
                <input
                  ref={(el) => { fileInputRefs.current[sphere.id] = el }}
                  type="file"
                  accept="image/png,image/jpeg,image/webp"
                  className="hidden"
                  onChange={(e) => handleIconSelected(sphere.id, e)}
                />
              </div>
            ))}
          </div>
        </div>

        {/* –°—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {selectedSphere && (
          <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50" onClick={() => setSelectedSphere(null)}>
            <div className="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 border border-gray-700" onClick={(e) => e.stopPropagation()}>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-white flex items-center">
                  <span className="mr-2 text-2xl">{selectedSphere.icon}</span>
                  –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {selectedSphere.name}
                </h3>
                <button 
                  onClick={() => setSelectedSphere(null)}
                  className="text-gray-400 hover:text-white text-xl"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded p-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-white mb-2">
                      {selectedSphere.health_percentage}%
                    </div>
                    <div className="text-gray-400">–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ñ–µ—Ä—ã</div>
                  </div>
                </div>
                
                <div className="text-gray-300 text-sm">
                  <p>üéØ <strong>–î–ª—è +1%:</strong> –í—ã–ø–æ–ª–Ω–∏ 1 –∑–∞–¥–∞—á—É –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ</p>
                  <p>üöÄ <strong>–î–ª—è +5%:</strong> –î–æ—Å—Ç–∏–≥–Ω–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏</p>
                  <p>üí´ <strong>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–µ–ª—å:</strong> {selectedSphere.global_goal || '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏'}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */}
        <style jsx>{`
          .custom-scrollbar::-webkit-scrollbar {
            width: 4px;
          }
          .custom-scrollbar::-webkit-scrollbar-track {
            background: rgba(55, 65, 81, 0.3);
            border-radius: 2px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb {
            background: rgba(107, 114, 128, 0.7);
            border-radius: 2px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: rgba(107, 114, 128, 0.9);
          }
        `}</style>
      </div>

      {/* –î–µ—Ä–µ–≤–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—Ñ–µ—Ä—ã */}
      <SphereDevelopmentTree
        sphere={selectedSphereForTree}
        isOpen={isTreeModalOpen}
        onClose={closeTreeModal}
      />

      {/* –ú–æ–¥–∞–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã */}
      {isAddSphereOpen && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50" onClick={() => setIsAddSphereOpen(false)}>
          <div className="bg-gray-800 border border-gray-700 rounded-lg p-5 w-full max-w-sm mx-4" onClick={(e)=>e.stopPropagation()}>
            <h4 className="text-white font-semibold mb-3">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ñ–µ—Ä—É</h4>
            <input
              type="text"
              value={newSphereName}
              onChange={(e)=>setNewSphereName(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–æ–∫—Å"
              className="w-full bg-gray-700 text-white rounded px-3 py-2 mb-2 outline-none focus:ring-2 focus:ring-purple-500"
            />
            {createSphereError && <div className="text-red-400 text-xs mb-2">{createSphereError}</div>}
            <div className="flex space-x-2">
              <button
                onClick={handleCreateSphere}
                disabled={isCreatingSphere}
                className="flex-1 bg-purple-600 hover:bg-purple-700 disabled:bg-purple-800 text-white rounded px-3 py-2"
              >
                {isCreatingSphere ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
              </button>
              <button
                onClick={() => setIsAddSphereOpen(false)}
                className="flex-1 bg-gray-600 hover:bg-gray-500 text-white rounded px-3 py-2"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Paywall Modal –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–æ–≤ */}
      {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ */}
      {showMascotPaywall && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md mx-4">
            <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">
              üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–æ—Ç–∞
            </h3>
            <p className="mb-4 text-gray-700 dark:text-gray-300">
              –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
            </p>
            <div className="mb-4">
              <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</div>
              <ul className="text-sm space-y-1 text-gray-700 dark:text-gray-300">
                <li>‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –º–∞—Å–∫–æ—Ç–∞</li>
                <li>‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                <li>‚Ä¢ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</li>
              </ul>
            </div>
            <p className="text-2xl font-bold mb-4 text-center text-gray-900 dark:text-white">
              $1.00
            </p>
            <div className="flex space-x-4">
              <button 
                onClick={() => {
                  console.log('üí≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ –º–∞—Å–∫–æ—Ç–∞')
                  handleMascotPaymentSuccess(`pi_mascot_${Date.now()}`)
                }}
                className="flex-1 bg-gradient-to-r from-pink-600 to-purple-600 text-white py-2 px-4 rounded hover:from-pink-700 hover:to-purple-700 transition-all"
              >
                –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å
              </button>
              <button 
                onClick={() => setShowMascotPaywall(false)}
                className="flex-1 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 py-2 px-4 rounded hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors"
              >
                –ü–æ–∑–∂–µ
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  )
} 