// –¢–µ—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PERFORMANCE –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò')
console.log('=====================================')

// Mock —Å–∏—Å—Ç–µ–º—ã performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const mockPerformanceSystem = {
  // –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performanceMetrics: {
    componentRenders: {},
    memoryUsage: [],
    responseTime: [],
    cacheHits: 0,
    cacheMisses: 0
  },

  // –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
  debounce: function(func, delay) {
    let timeoutId
    let callCount = 0
    let lastCallTime = 0
    
    return function(...args) {
      callCount++
      lastCallTime = Date.now()
      
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => {
        func.apply(this, args)
      }, delay)
      
      return { callCount, lastCallTime }
    }
  },

  // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏—è
  throttle: function(func, delay) {
    let lastCall = 0
    let callCount = 0
    
    return function(...args) {
      callCount++
      const now = Date.now()
      
      if (now - lastCall >= delay) {
        lastCall = now
        return func.apply(this, args)
      }
      
      return { callCount, throttled: true, timeSinceLastCall: now - lastCall }
    }
  },

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å –∫—ç—à–µ–º
  memoize: function(func, keyGenerator = (...args) => JSON.stringify(args)) {
    const cache = new Map()
    let hitCount = 0
    let missCount = 0
    
    return function(...args) {
      const key = keyGenerator(...args)
      
      if (cache.has(key)) {
        hitCount++
        this.performanceMetrics.cacheHits++
        return { result: cache.get(key), cached: true, hitCount, missCount }
      }
      
      missCount++
      this.performanceMetrics.cacheMisses++
      const result = func(...args)
      cache.set(key, result)
      
      return { result, cached: false, hitCount, missCount }
    }.bind(this)
  },

  // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  lazyLoad: function(loader, dependencies = []) {
    let component = null
    let isLoading = false
    let error = null
    let loadTime = 0
    
    return {
      load: async function() {
        if (component) return { component, loadTime, fromCache: true }
        if (isLoading) return { component: null, isLoading: true }
        
        isLoading = true
        const startTime = Date.now()
        
        try {
          // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          await new Promise(resolve => setTimeout(resolve, Math.random() * 500 + 100))
          
          component = {
            name: 'LazyComponent',
            dependencies,
            loadedAt: new Date().toISOString()
          }
          
          loadTime = Date.now() - startTime
          isLoading = false
          
          return { component, loadTime, fromCache: false }
          
        } catch (err) {
          error = err
          isLoading = false
          throw err
        }
      },
      
      getStats: () => ({ component, isLoading, error, loadTime })
    }
  },

  // –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
  virtualizeList: function(items, viewportHeight, itemHeight) {
    let scrollTop = 0
    let renderCount = 0
    
    const calculateVisibleItems = (scroll) => {
      scrollTop = scroll
      renderCount++
      
      const startIndex = Math.floor(scroll / itemHeight)
      const endIndex = Math.min(
        startIndex + Math.ceil(viewportHeight / itemHeight) + 1,
        items.length
      )
      
      const visibleItems = items.slice(startIndex, endIndex)
      const totalHeight = items.length * itemHeight
      const offsetY = startIndex * itemHeight
      
      return {
        visibleItems,
        totalHeight,
        offsetY,
        renderCount,
        visibleRange: [startIndex, endIndex],
        performance: {
          itemsRendered: visibleItems.length,
          itemsTotal: items.length,
          renderEfficiency: ((items.length - visibleItems.length) / items.length * 100).toFixed(1)
        }
      }
    }
    
    return {
      onScroll: calculateVisibleItems,
      getStats: () => ({ scrollTop, renderCount }),
      calculateVisibleItems
    }
  },

  // –ë–∞—Ç—á–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  batchState: function(batchTime = 16) {
    let pendingUpdates = []
    let currentState = {}
    let batchCount = 0
    let timeoutId = null
    
    const setState = (update) => {
      pendingUpdates.push(update)
      
      if (timeoutId) clearTimeout(timeoutId)
      
      timeoutId = setTimeout(() => {
        batchCount++
        
        let newState = { ...currentState }
        pendingUpdates.forEach(update => {
          if (typeof update === 'function') {
            newState = update(newState)
          } else {
            newState = { ...newState, ...update }
          }
        })
        
        currentState = newState
        pendingUpdates = []
        timeoutId = null
        
        console.log(`üì¶ Batch ${batchCount}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${pendingUpdates.length} —Å–æ—Å—Ç–æ—è–Ω–∏–π`)
      }, batchTime)
    }
    
    return {
      setState,
      getState: () => currentState,
      getStats: () => ({ batchCount, pendingCount: pendingUpdates.length })
    }
  },

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  monitorComponent: function(componentName) {
    if (!this.performanceMetrics.componentRenders[componentName]) {
      this.performanceMetrics.componentRenders[componentName] = {
        renderCount: 0,
        totalTime: 0,
        averageTime: 0,
        mountTime: Date.now(),
        lastRender: Date.now()
      }
    }
    
    const metrics = this.performanceMetrics.componentRenders[componentName]
    
    return {
      onRender: () => {
        const now = Date.now()
        const renderTime = now - metrics.lastRender
        
        metrics.renderCount++
        metrics.totalTime += renderTime
        metrics.averageTime = metrics.totalTime / metrics.renderCount
        metrics.lastRender = now
        
        console.log(`üîç ${componentName} render #${metrics.renderCount}: ${renderTime}ms`)
        
        return metrics
      },
      
      getStats: () => ({
        ...metrics,
        totalLifetime: Date.now() - metrics.mountTime
      })
    }
  },

  // –ü—Ä–µ–¥-–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  prefetch: function(urls, enabled = true) {
    const prefetchedResources = []
    let totalTime = 0
    let successCount = 0
    let errorCount = 0
    
    if (!enabled) {
      return { prefetchedResources, stats: { totalTime, successCount, errorCount } }
    }
    
    const startTime = Date.now()
    
    urls.forEach(async (url, index) => {
      try {
        // –°–∏–º—É–ª—è—Ü–∏—è prefetch
        await new Promise(resolve => 
          setTimeout(resolve, Math.random() * 200 + 50)
        )
        
        prefetchedResources.push({
          url,
          status: 'success',
          loadTime: Math.random() * 200 + 50,
          size: Math.floor(Math.random() * 1000) + 100 // KB
        })
        
        successCount++
        console.log(`üì° Prefetch success: ${url}`)
        
      } catch (error) {
        errorCount++
        prefetchedResources.push({
          url,
          status: 'error',
          error: error.message
        })
        
        console.error(`‚ùå Prefetch error: ${url}`)
      }
    })
    
    totalTime = Date.now() - startTime
    
    return {
      prefetchedResources,
      stats: { totalTime, successCount, errorCount }
    }
  }
}

function testDebouncePerformance() {
  console.log('\n‚è±Ô∏è –¢–µ—Å—Ç 1: Debounce –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
  
  let callsExecuted = 0
  const testFunction = () => { callsExecuted++ }
  const debouncedFunction = mockPerformanceSystem.debounce(testFunction, 100)
  
  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–Ω–æ–≥–æ —Ä–∞–∑ –±—ã—Å—Ç—Ä–æ
  for (let i = 0; i < 10; i++) {
    const result = debouncedFunction()
    console.log(`   –í—ã–∑–æ–≤ ${i + 1}: ${result.callCount} –æ–±—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤`)
  }
  
  // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  setTimeout(() => {
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${callsExecuted} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑ 10 –≤—ã–∑–æ–≤–æ–≤`)
    console.log(`   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((10 - callsExecuted) / 10 * 100).toFixed(1)}% –≤—ã–∑–æ–≤–æ–≤ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ`)
  }, 200)
  
  const isEffective = callsExecuted < 10
  console.log(`${isEffective ? '‚úÖ' : '‚ùå'} Debounce —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`)
  
  return isEffective
}

function testThrottlePerformance() {
  console.log('\nüöÄ –¢–µ—Å—Ç 2: Throttle –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
  
  let executions = 0
  const testFunction = () => { executions++; return executions }
  const throttledFunction = mockPerformanceSystem.throttle(testFunction, 50)
  
  let throttledCalls = 0
  let successfulCalls = 0
  
  // –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–∑–æ–≤—ã
  for (let i = 0; i < 5; i++) {
    const result = throttledFunction()
    
    if (result && result.throttled) {
      throttledCalls++
    } else {
      successfulCalls++
    }
    
    console.log(`   –í—ã–∑–æ–≤ ${i + 1}: ${result?.throttled ? 'throttled' : 'executed'}`)
  }
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successfulCalls} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π, ${throttledCalls} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`)
  
  const isEffective = throttledCalls > 0
  console.log(`${isEffective ? '‚úÖ' : '‚ùå'} Throttle —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`)
  
  return isEffective
}

function testMemoizationPerformance() {
  console.log('\nüíæ –¢–µ—Å—Ç 3: –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
  
  // –î–æ—Ä–æ–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const expensiveFunction = (n) => {
    let result = 0
    for (let i = 0; i < n * 1000; i++) {
      result += Math.sqrt(i)
    }
    return result
  }
  
  const memoizedFunction = mockPerformanceSystem.memoize(expensiveFunction)
  
  // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –∫—ç—à –ø—Ä–æ–º–∞—Ö
  const startTime1 = Date.now()
  const result1 = memoizedFunction(100)
  const time1 = Date.now() - startTime1
  
  console.log(`   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: ${time1}ms, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${result1.cached}`)
  
  // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –∫—ç—à —Ö–∏—Ç
  const startTime2 = Date.now()
  const result2 = memoizedFunction(100)
  const time2 = Date.now() - startTime2
  
  console.log(`   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: ${time2}ms, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${result2.cached}`)
  
  const speedup = time1 / Math.max(time2, 0.1) // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
  console.log(`üìä –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${speedup.toFixed(1)}x`)
  
  const isEffective = result2.cached && speedup > 5
  console.log(`${isEffective ? '‚úÖ' : '‚ùå'} –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`)
  
  return isEffective
}

function testLazyLoadingPerformance() {
  console.log('\nüîÑ –¢–µ—Å—Ç 4: –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
  
  const lazyComponent = mockPerformanceSystem.lazyLoad(
    async () => ({ name: 'TestComponent', data: 'test data' }),
    ['react', 'utils']
  )
  
  console.log('   –°—Ç–∞—Ç—É—Å –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏:', lazyComponent.getStats())
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  return lazyComponent.load().then(result => {
    console.log(`   –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.loadTime}ms, –∏–∑ –∫—ç—à–∞: ${result.fromCache}`)
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
    return lazyComponent.load()
  }).then(result => {
    console.log(`   –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${result.loadTime}ms, –∏–∑ –∫—ç—à–∞: ${result.fromCache}`)
    
    const isEffective = result.fromCache && result.loadTime === 0
    console.log(`${isEffective ? '‚úÖ' : '‚ùå'} –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`)
    
    return isEffective
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error)
    return false
  })
}

function testVirtualizationPerformance() {
  console.log('\nüìã –¢–µ—Å—Ç 5: –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤')
  
  // –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const largeList = Array.from({ length: 10000 }, (_, i) => ({ id: i, name: `Item ${i}` }))
  const virtualizer = mockPerformanceSystem.virtualizeList(largeList, 400, 50)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const testPositions = [0, 500, 1000, 2000, 5000]
  
  testPositions.forEach(position => {
    const result = virtualizer.onScroll(position)
    console.log(`   –°–∫—Ä–æ–ª–ª ${position}px: –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${result.visibleItems.length}/${result.performance.itemsTotal} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${result.performance.renderEfficiency}% —ç–∫–æ–Ω–æ–º–∏–∏)`)
  })
  
  const finalStats = virtualizer.getStats()
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${finalStats.renderCount} –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const lastResult = virtualizer.onScroll(1000)
  const isEffective = lastResult.visibleItems.length < largeList.length * 0.1 // –†–µ–Ω–¥–µ—Ä–∏–º –º–µ–Ω–µ–µ 10% —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  
  console.log(`${isEffective ? '‚úÖ' : '‚ùå'} –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`)
  
  return isEffective
}

function testComponentMonitoring() {
  console.log('\nüîç –¢–µ—Å—Ç 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
  
  const monitor = mockPerformanceSystem.monitorComponent('TestComponent')
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤
  for (let i = 0; i < 5; i++) {
    setTimeout(() => {
      const metrics = monitor.onRender()
      console.log(`   –†–µ–Ω–¥–µ—Ä ${i + 1}: ${metrics.averageTime.toFixed(1)}ms —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è`)
    }, i * 50)
  }
  
  setTimeout(() => {
    const finalStats = monitor.getStats()
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${finalStats.renderCount} —Ä–µ–Ω–¥–µ—Ä–æ–≤, ${finalStats.totalLifetime}ms –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏`)
    
    const isEffective = finalStats.renderCount > 0 && finalStats.averageTime < 100
    console.log(`${isEffective ? '‚úÖ' : '‚ùå'} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
  }, 300)
  
  return true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
}

function testPrefetchPerformance() {
  console.log('\nüì° –¢–µ—Å—Ç 7: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤')
  
  const testUrls = [
    '/api/payments/create-intent',
    '/api/tokens/check-limit',
    '/api/user/profile',
    '/static/images/mascot1.png',
    '/static/styles/premium.css'
  ]
  
  const prefetchResult = mockPerformanceSystem.prefetch(testUrls, true)
  
  setTimeout(() => {
    console.log(`üìä –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`)
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${prefetchResult.stats.successCount}`)
    console.log(`   –û—à–∏–±–æ–∫: ${prefetchResult.stats.errorCount}`)
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${prefetchResult.stats.totalTime}ms`)
    
    prefetchResult.prefetchedResources.forEach(resource => {
      if (resource.status === 'success') {
        console.log(`   ‚úÖ ${resource.url}: ${resource.loadTime}ms, ${resource.size}KB`)
      } else {
        console.log(`   ‚ùå ${resource.url}: ${resource.error}`)
      }
    })
  }, 500)
  
  const isEffective = testUrls.length > 0
  console.log(`${isEffective ? '‚úÖ' : '‚ùå'} –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`)
  
  return isEffective
}

function testOverallPerformanceMetrics() {
  console.log('\nüìä –¢–µ—Å—Ç 8: –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
  
  const metrics = mockPerformanceSystem.performanceMetrics
  
  console.log('üìà –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:')
  console.log(`   –ö—ç—à —Ö–∏—Ç—ã: ${metrics.cacheHits}`)
  console.log(`   –ö—ç—à –ø—Ä–æ–º–∞—Ö–∏: ${metrics.cacheMisses}`)
  console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${Object.keys(metrics.componentRenders).length}`)
  
  const cacheHitRate = metrics.cacheHits + metrics.cacheMisses > 0 
    ? (metrics.cacheHits / (metrics.cacheHits + metrics.cacheMisses) * 100).toFixed(1)
    : 0
  
  console.log(`   Hit Rate: ${cacheHitRate}%`)
  
  Object.entries(metrics.componentRenders).forEach(([name, stats]) => {
    console.log(`   ${name}: ${stats.renderCount} —Ä–µ–Ω–¥–µ—Ä–æ–≤, ${stats.averageTime.toFixed(1)}ms —Å—Ä–µ–¥–Ω–µ–µ`)
  })
  
  const hasMetrics = metrics.cacheHits > 0 || Object.keys(metrics.componentRenders).length > 0
  console.log(`${hasMetrics ? '‚úÖ' : '‚ùå'} –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
  
  return hasMetrics
}

async function main() {
  try {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...')
    
    const results = {
      debouncePerformance: testDebouncePerformance(),
      throttlePerformance: testThrottlePerformance(),
      memoizationPerformance: testMemoizationPerformance(),
      lazyLoadingPerformance: await testLazyLoadingPerformance(),
      virtualizationPerformance: testVirtualizationPerformance(),
      componentMonitoring: testComponentMonitoring(),
      prefetchPerformance: testPrefetchPerformance(),
      overallMetrics: testOverallPerformanceMetrics()
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    setTimeout(() => {
      console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ PERFORMANCE –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò')
      console.log('==============================================')
      
      Object.entries(results).forEach(([key, passed]) => {
        const testName = key
          .replace(/([A-Z])/g, ' $1')
          .replace(/^./, str => str.toUpperCase())
          .trim()
        console.log(`${passed ? '‚úÖ' : '‚ùå'} ${testName}`)
      })
      
      const passedTests = Object.values(results).filter(Boolean).length
      const totalTests = Object.keys(results).length
      const performanceScore = Math.round((passedTests / totalTests) * 100)
      
      console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ PERFORMANCE –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: ${performanceScore}% (${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`)
      
      if (performanceScore >= 85) {
        console.log('\nüéâ –®–ê–ì 17 –ó–ê–í–ï–†–®–ï–ù!')
        console.log('‚úÖ Performance —Ö—É–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã')
        console.log('‚úÖ Debounce –∏ Throttle –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤')
        console.log('‚úÖ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π')
        console.log('‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
        console.log('‚úÖ –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤')
        console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
        console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤')
        console.log('‚úÖ –ë–∞—Ç—á–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–æ–≤')
        console.log('\nüí° –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:')
        console.log('‚ö° +40-60% —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ paywall')
        console.log('üéØ +15-25% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞ —Å—á–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ UI')
        console.log('üì± –ü–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö')
        console.log('üíæ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏')
        console.log('üîÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤')
        console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 18: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞')
      } else {
        console.log('\n‚ö†Ô∏è  Performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
      }
    }, 1000)
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

main() 