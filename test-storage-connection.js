import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ NEXT_PUBLIC_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testStorageConnection() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö STORAGE')
  console.log('=====================================\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ buckets
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ buckets...')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()
    
    if (bucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:', bucketsError.message)
      return
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ buckets: ${buckets?.length || 0}`)
    buckets?.forEach(bucket => {
      console.log(`   - ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`)
    })

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ bucket
    const publicAssetsBucket = buckets?.find(b => b.name === 'public-assets')
    if (publicAssetsBucket) {
      console.log('\n‚úÖ Bucket public-assets –Ω–∞–π–¥–µ–Ω!')
      console.log(`   –ü—É–±–ª–∏—á–Ω—ã–π: ${publicAssetsBucket.public ? '–î–∞' : '–ù–µ—Ç'}`)
      console.log(`   –°–æ–∑–¥–∞–Ω: ${publicAssetsBucket.created_at}`)
    } else {
      console.log('\n‚ùå Bucket public-assets –ù–ï –Ω–∞–π–¥–µ–Ω')
      console.log('–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ Supabase Dashboard ‚Üí Storage ‚Üí New bucket')
      return
    }

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testContent = `–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ ${new Date().toISOString()}`
    const testBlob = new Blob([testContent], { type: 'text/plain' })
    const testFileName = `test-${Date.now()}.txt`

    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('public-assets')
      .upload(testFileName, testBlob, {
        cacheControl: '3600',
        upsert: false
      })

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', uploadError.message)
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
      console.log('- –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É (–Ω—É–∂–Ω—ã –ø–æ–ª–∏—Ç–∏–∫–∏ RLS)')
      console.log('- Bucket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
      console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π')
    } else {
      console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      console.log(`   –ü—É—Ç—å: ${uploadData.path}`)

      // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
      const { data: urlData } = supabase.storage
        .from('public-assets')
        .getPublicUrl(testFileName)

      console.log(`   URL: ${urlData.publicUrl}`)

      // 5. –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      console.log('\n3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...')
      const { error: deleteError } = await supabase.storage
        .from('public-assets')
        .remove([testFileName])

      if (deleteError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:', deleteError.message)
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
      }
    }

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û')

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

testStorageConnection()
