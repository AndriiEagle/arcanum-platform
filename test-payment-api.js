// –¢–µ—Å—Ç –¥–ª—è Payment API endpoint
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAYMENT API ENDPOINT')
console.log('===================================')

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_BASE_URL = 'http://localhost:3000'
const API_ENDPOINT = '/api/payments/create-intent'

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_CASES = {
  validTokenPurchase: {
    amount: 2.00,
    product_type: 'token_limit',
    user_id: 'test-user-123',
    description: '–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤'
  },
  
  validMascotPurchase: {
    amount: 1.00,
    product_type: 'mascot',
    user_id: 'test-user-456'
  },
  
  validPremiumSubscription: {
    amount: 9.99,
    product_type: 'premium_subscription',
    user_id: 'test-user-789'
  },
  
  invalidAmount: {
    amount: 0,
    product_type: 'token_limit',
    user_id: 'test-user-123'
  },
  
  invalidProductType: {
    amount: 5.00,
    product_type: 'invalid_product',
    user_id: 'test-user-123'
  },
  
  missingUserId: {
    amount: 2.00,
    product_type: 'token_limit'
  },
  
  priceMismatch: {
    amount: 10.00, // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è token_limit
    product_type: 'token_limit',
    user_id: 'test-user-123'
  }
}

async function testGetEndpoint() {
  console.log('\nüìã –¢–µ—Å—Ç 1: GET endpoint (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö)')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'GET'
    })
    
    if (!response.ok) {
      console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`)
      return false
    }
    
    const data = await response.json()
    
    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è API:')
    console.log(`   - –í–µ—Ä—Å–∏—è: ${data.version}`)
    console.log(`   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${data.available_products?.join(', ')}`)
    console.log(`   - –í–∞–ª—é—Ç–∞: ${data.currency}`)
    console.log(`   - –ú–µ—Ç–æ–¥—ã: ${data.methods?.join(', ')}`)
    
    if (data.prices) {
      console.log('üí∞ –¶–µ–Ω—ã:')
      Object.entries(data.prices).forEach(([product, price]) => {
        console.log(`   - ${product}: $${price}`)
      })
    }
    
    return data.success && data.available_products && data.prices
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testValidTokenPurchase() {
  console.log('\nüí∞ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.validTokenPurchase)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –£—Å–ø–µ—Ö: ${data.success}`)
    
    if (data.success) {
      console.log(`   - Client Secret: ${data.client_secret?.substring(0, 20)}...`)
      console.log(`   - Payment ID: ${data.payment_intent_id}`)
      console.log(`   - –°—É–º–º–∞: ${data.amount / 100} USD`)
      console.log(`   - –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: ${data.product_type}`)
      
      return response.ok && data.success && data.client_secret && data.payment_intent_id
    } else {
      console.log(`   - –û—à–∏–±–∫–∞: ${data.error}`)
      return false
    }
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testValidMascotPurchase() {
  console.log('\nüé® –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –º–∞—Å–∫–æ—Ç–∞')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.validMascotPurchase)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –£—Å–ø–µ—Ö: ${data.success}`)
    console.log(`   - –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: ${data.product_type}`)
    console.log(`   - –°—Ç–æ–∏–º–æ—Å—Ç—å: $${data.amount ? data.amount / 100 : 'N/A'}`)
    
    return response.ok && data.success && data.product_type === 'mascot'
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testInvalidAmount() {
  console.log('\nüö´ –¢–µ—Å—Ç 4: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.invalidAmount)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –£—Å–ø–µ—Ö: ${data.success}`)
    console.log(`   - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${data.code}`)
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.error}`)
    
    return response.status === 400 && !data.success && data.code === 'INVALID_AMOUNT'
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testInvalidProductType() {
  console.log('\nüö´ –¢–µ—Å—Ç 5: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.invalidProductType)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${data.code}`)
    console.log(`   - –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–ø—ã: ${data.valid_types?.join(', ')}`)
    
    return response.status === 400 && data.code === 'INVALID_PRODUCT_TYPE'
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testMissingUserId() {
  console.log('\nüö´ –¢–µ—Å—Ç 6: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π User ID')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.missingUserId)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${data.code}`)
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.error}`)
    
    return response.status === 400 && data.code === 'MISSING_USER_ID'
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function testPriceMismatch() {
  console.log('\nüö´ –¢–µ—Å—Ç 7: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã')
  
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_CASES.priceMismatch)
    })
    
    const data = await response.json()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
    console.log(`   - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${data.code}`)
    console.log(`   - –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞: $${data.expected_amount}`)
    console.log(`   - –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: $${data.received_amount}`)
    
    return response.status === 400 && data.code === 'PRICE_MISMATCH'
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    }
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

async function main() {
  try {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Payment API...')
    
    const results = {
      getEndpoint: await testGetEndpoint(),
      validTokenPurchase: await testValidTokenPurchase(),
      validMascotPurchase: await testValidMascotPurchase(),
      invalidAmount: await testInvalidAmount(),
      invalidProductType: await testInvalidProductType(),
      missingUserId: await testMissingUserId(),
      priceMismatch: await testPriceMismatch()
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ PAYMENT API')
    console.log('==================================')
    
    const serverNotRunning = Object.values(results).includes('server_not_running')
    
    if (serverNotRunning) {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
      console.log('\nüìù –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev')
      console.log('2. –î–æ–∂–¥–∏—Ç–µ—Å—å "Ready on localhost:3000"')
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-payment-api.js')
      console.log('\n‚úÖ PAYMENT API ENDPOINT –°–û–ó–î–ê–ù!')
      return
    }
    
    Object.entries(results).forEach(([key, passed]) => {
      const testName = key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .trim()
      console.log(`${passed === true ? '‚úÖ' : '‚ùå'} ${testName}`)
    })
    
    const passedTests = Object.values(results).filter(r => r === true).length
    const totalTests = Object.keys(results).length
    const apiScore = Math.round((passedTests / totalTests) * 100)
    
    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ PAYMENT API: ${apiScore}% (${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`)
    
    if (apiScore >= 85) {
      console.log('\nüéâ –®–ê–ì 10 –ó–ê–í–ï–†–®–ï–ù!')
      console.log('‚úÖ Payment API endpoint —Å–æ–∑–¥–∞–Ω')
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Payment Service —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
      console.log('‚úÖ GET endpoint –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
      console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 11: Paywall Modal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
    } else {
      console.log('\n‚ö†Ô∏è  Payment API —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

main() 