require('dotenv').config({ path: '.env' })
const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

async function createAllTables() {
  console.log('üöÄ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ SUPABASE')
  console.log('============================')
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local:')
    console.log('   NEXT_PUBLIC_SUPABASE_URL=–≤–∞—à_url')
    console.log('   SUPABASE_SERVICE_KEY=–≤–∞—à_service_key')
    return
  }
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã')
  console.log(`üîó Supabase URL: ${supabaseUrl.substring(0, 30)}...`)
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service key –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: { persistSession: false }
  })
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    const migration1 = fs.readFileSync(path.join(__dirname, 'supabase/migrations/0000_initial_schema.sql'), 'utf8')
    const migration2 = fs.readFileSync(path.join(__dirname, 'supabase/migrations/0001_additional_tables.sql'), 'utf8')
    
    console.log('üìÑ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 0000_initial_schema.sql...')
    const result1 = await supabase.rpc('exec_sql', { sql_query: migration1 })
    
    if (result1.error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç):')
      console.log(result1.error.message)
    } else {
      console.log('‚úÖ –ü–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä—É—é –º–∏–≥—Ä–∞—Ü–∏—é  
    console.log('üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 0001_additional_tables.sql...')
    const result2 = await supabase.rpc('exec_sql', { sql_query: migration2 })
    
    if (result2.error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç):')
      console.log(result2.error.message)
    } else {
      console.log('‚úÖ –í—Ç–æ—Ä–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HTTP API
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sql1Commands = migration1.split(';').filter(cmd => cmd.trim())
    const sql2Commands = migration2.split(';').filter(cmd => cmd.trim())
    
    let successCount = 0
    let totalCommands = sql1Commands.length + sql2Commands.length
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    for (const command of sql1Commands) {
      if (command.trim()) {
        try {
          const { error } = await supabase.rpc('exec_single_sql', { 
            sql_command: command.trim() + ';'
          })
          if (!error) successCount++
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
          if (!e.message?.includes('already exists')) {
            console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command.substring(0, 50)}...`)
          } else {
            successCount++
          }
        }
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Ç–æ—Ä–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    for (const command of sql2Commands) {
      if (command.trim()) {
        try {
          const { error } = await supabase.rpc('exec_single_sql', {
            sql_command: command.trim() + ';'
          })
          if (!error) successCount++
        } catch (e) {
          if (!e.message?.includes('already exists')) {
            console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command.substring(0, 50)}...`)
          } else {
            successCount++
          }
        }
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶:`)
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successCount}/${totalCommands} –∫–æ–º–∞–Ω–¥`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶:')
    
    const tablesToCheck = [
      'ui_layouts',
      'life_spheres', 
      'user_stats',
      'user_tasks',
      'sphere_categories',
      'generated_mascots',
      'user_buffs',
      'ai_model_usage',
      'scheduled_rewards'
    ]
    
    let createdTables = []
    
    for (const tableName of tablesToCheck) {
      try {
        const { data, error } = await supabase.from(tableName).select('*').limit(1)
        if (!error) {
          createdTables.push(tableName)
          console.log(`‚úÖ ${tableName} - —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`)
        } else {
          console.log(`‚ùå ${tableName} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        }
      } catch (e) {
        console.log(`‚ùå ${tableName} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`)
      }
    }
    
    console.log(`\nüéØ –ò–¢–û–ì–û –°–û–ó–î–ê–ù–û –¢–ê–ë–õ–ò–¶: ${createdTables.length}/${tablesToCheck.length}`)
    
    if (createdTables.length === tablesToCheck.length) {
      console.log('\nüéâ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!')
      console.log('üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
      await createDemoData(supabase)
      
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã')
      console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:')
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard')
      console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
      console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
      console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã')
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    console.log('\nüìã –†–£–ß–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:')
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard')
    console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç')
    console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
    console.log('4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    console.log('5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:')
    console.log('   - supabase/migrations/0000_initial_schema.sql')
    console.log('   - supabase/migrations/0001_additional_tables.sql')
  }
}

async function createDemoData(supabase) {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å–ª–æ–≤–Ω–æ)
    const demoUserId = '00000000-0000-0000-0000-000000000000'
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
    const demoSpheres = [
      { user_id: demoUserId, sphere_name: '–ó–¥–æ—Ä–æ–≤—å–µ', health_percentage: 78, resonance_degree: 0.85 },
      { user_id: demoUserId, sphere_name: '–ö–∞—Ä—å–µ—Ä–∞', health_percentage: 92, resonance_degree: 0.92 },
      { user_id: demoUserId, sphere_name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', health_percentage: 65, resonance_degree: 0.70 },
      { user_id: demoUserId, sphere_name: '–§–∏–Ω–∞–Ω—Å—ã', health_percentage: 88, resonance_degree: 0.89 }
    ]
    
    const { error: spheresError } = await supabase
      .from('life_spheres')
      .upsert(demoSpheres, { onConflict: 'user_id,sphere_name' })
    
    if (!spheresError) {
      console.log('‚úÖ –î–µ–º–æ —Å—Ñ–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã')
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: statsError } = await supabase
      .from('user_stats')
      .upsert({
        user_id: demoUserId,
        level: 15,
        current_xp: 2340,
        next_level_xp: 3000,
        energy: 85
      }, { onConflict: 'user_id' })
    
    if (!statsError) {
      console.log('‚úÖ –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫
createAllTables().catch(console.error) 