// –¢–µ—Å—Ç –¥–ª—è Paywall Modal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAYWALL MODAL')
console.log('=============================')

// Mock —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
const mockPaywallModal = {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  PRODUCT_CONFIG: {
    token_limit: {
      icon: 'üí∞',
      title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 2000 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤',
      benefits: ['2000 —Ç–æ–∫–µ–Ω–æ–≤', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞']
    },
    mascot: {
      icon: 'üé®',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–æ—Ç–∞',
      description: '–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI',
      benefits: ['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è']
    },
    premium_model: {
      icon: 'üß†',
      title: '–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å',
      description: '–î–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º –º–æ—â–Ω—ã–º AI –º–æ–¥–µ–ª—è–º –Ω–∞ 1 —á–∞—Å',
      benefits: ['GPT-4o –¥–æ—Å—Ç—É–ø', 'O1-preview –º–æ–¥–µ–ª—å', '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å']
    },
    premium_subscription: {
      icon: 'üëë',
      title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
      description: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      benefits: ['–í—Å–µ –º–æ–¥–µ–ª–∏', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    }
  },

  // –°–∏–º—É–ª—è—Ü–∏—è props validation
  validateProps: function(props) {
    const requiredProps = ['isOpen', 'type', 'cost', 'onClose']
    const validTypes = ['token_limit', 'mascot', 'premium_model', 'premium_subscription']
    
    const errors = []
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö props
    for (const prop of requiredProps) {
      if (!(prop in props)) {
        errors.push(`Missing required prop: ${prop}`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    if (props.type && !validTypes.includes(props.type)) {
      errors.push(`Invalid product type: ${props.type}. Must be one of: ${validTypes.join(', ')}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
    if (props.cost && (typeof props.cost !== 'number' || props.cost <= 0)) {
      errors.push('Cost must be a positive number')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ userId
    if (props.userId && typeof props.userId !== 'string') {
      errors.push('UserId must be a string')
    }
    
    return errors
  },

  // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Payment Intent
  simulatePaymentIntent: async function(productType, cost, userId) {
    console.log(`üí≥ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Payment Intent...`)
    console.log(`   - –ü—Ä–æ–¥—É–∫—Ç: ${productType}`)
    console.log(`   - –¶–µ–Ω–∞: $${cost}`)
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`)
    
    // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
    const mockResponse = {
      success: true,
      client_secret: `pi_test_${Date.now()}_secret`,
      payment_intent_id: `pi_test_${Date.now()}`,
      amount: cost * 100,
      currency: 'usd',
      product_type: productType,
      user_id: userId,
      created_at: new Date().toISOString()
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 100))
    
    console.log(`‚úÖ Payment Intent —Å–æ–∑–¥–∞–Ω: ${mockResponse.payment_intent_id}`)
    return mockResponse
  },

  // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Stripe
  simulateStripeLoad: async function() {
    console.log('üîí –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Stripe...')
    
    const hasStripeKey = !!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
    
    if (hasStripeKey && process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY !== 'pk_test_your_publishable_key_here') {
      console.log('‚úÖ –ù–∞—Å—Ç–æ—è—â–∏–π Stripe –∫–ª—é—á –Ω–∞–π–¥–µ–Ω')
      return { success: true, stripe: 'mock_stripe_instance' }
    } else {
      console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á')
      return { success: false, error: 'Invalid publishable key' }
    }
  }
}

function testProductConfigurations() {
  console.log('\nüìã –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
  
  const config = mockPaywallModal.PRODUCT_CONFIG
  const productTypes = Object.keys(config)
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${productTypes.length} —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:`)
  
  let allValid = true
  
  productTypes.forEach(type => {
    const product = config[type]
    const hasRequiredFields = product.icon && product.title && product.description && product.benefits
    
    console.log(`   ${hasRequiredFields ? '‚úÖ' : '‚ùå'} ${type}: ${product.title}`)
    
    if (hasRequiredFields) {
      console.log(`      - –ò–∫–æ–Ω–∫–∞: ${product.icon}`)
      console.log(`      - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ${product.benefits.length} —à—Ç.`)
    } else {
      allValid = false
    }
  })
  
  return allValid
}

function testPropsValidation() {
  console.log('\nüîç –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è props')
  
  const testCases = [
    {
      name: '–í–∞–ª–∏–¥–Ω—ã–µ props',
      props: {
        isOpen: true,
        type: 'token_limit',
        cost: 2.00,
        onClose: () => {},
        userId: 'test-user-123'
      },
      expectedErrors: 0
    },
    {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç type',
      props: {
        isOpen: true,
        cost: 2.00,
        onClose: () => {}
      },
      expectedErrors: 1
    },
    {
      name: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π type',
      props: {
        isOpen: true,
        type: 'invalid_type',
        cost: 2.00,
        onClose: () => {}
      },
      expectedErrors: 1
    },
    {
      name: '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞',
      props: {
        isOpen: true,
        type: 'mascot',
        cost: -5.00,
        onClose: () => {}
      },
      expectedErrors: 1
    }
  ]
  
  let passedTests = 0
  
  testCases.forEach(testCase => {
    const errors = mockPaywallModal.validateProps(testCase.props)
    const passed = errors.length === testCase.expectedErrors
    
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${testCase.name}`)
    if (errors.length > 0) {
      errors.forEach(error => console.log(`      - ${error}`))
    }
    
    if (passed) passedTests++
  })
  
  return passedTests === testCases.length
}

async function testPaymentFlow() {
  console.log('\nüí≥ –¢–µ—Å—Ç 3: –ü–ª–∞—Ç–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫')
  
  const testProducts = [
    { type: 'token_limit', cost: 2.00, userId: 'test-user-123' },
    { type: 'mascot', cost: 1.00, userId: 'test-user-456' },
    { type: 'premium_subscription', cost: 9.99, userId: 'test-user-789' }
  ]
  
  let allSuccessful = true
  
  for (const product of testProducts) {
    try {
      const result = await mockPaywallModal.simulatePaymentIntent(
        product.type,
        product.cost,
        product.userId
      )
      
      const isValid = result.success && 
                     result.client_secret && 
                     result.payment_intent_id &&
                     result.amount === product.cost * 100
      
      console.log(`   ${isValid ? '‚úÖ' : '‚ùå'} ${product.type}: Payment Intent`)
      
      if (!isValid) allSuccessful = false
      
    } catch (error) {
      console.log(`   ‚ùå ${product.type}: –û—à–∏–±–∫–∞ - ${error.message}`)
      allSuccessful = false
    }
  }
  
  return allSuccessful
}

async function testStripeIntegration() {
  console.log('\nüîí –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Stripe')
  
  try {
    const result = await mockPaywallModal.simulateStripeLoad()
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Stripe:')
    console.log(`   - –£—Å–ø–µ—Ö: ${result.success}`)
    console.log(`   - –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω: ${!!result.stripe}`)
    console.log(`   - –û—à–∏–±–∫–∞: ${result.error || '–ù–µ—Ç'}`)
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π
    return result.hasOwnProperty('success')
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    return false
  }
}

function testUIStates() {
  console.log('\nüé® –¢–µ—Å—Ç 5: –°–æ—Å—Ç–æ—è–Ω–∏—è UI')
  
  const states = [
    'loading', 'error', 'success', 'idle'
  ]
  
  const stateConfigs = {
    loading: { isLoading: true, error: null, success: false },
    error: { isLoading: false, error: 'Test error', success: false },
    success: { isLoading: false, error: null, success: true },
    idle: { isLoading: false, error: null, success: false }
  }
  
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:')
  
  let allValid = true
  
  states.forEach(state => {
    const config = stateConfigs[state]
    const isValidState = config.hasOwnProperty('isLoading') && 
                        config.hasOwnProperty('error') && 
                        config.hasOwnProperty('success')
    
    console.log(`   ${isValidState ? '‚úÖ' : '‚ùå'} ${state}: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`)
    
    if (!isValidState) allValid = false
  })
  
  return allValid
}

function testResponsiveDesign() {
  console.log('\nüì± –¢–µ—Å—Ç 6: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω')
  
  const breakpoints = {
    mobile: { maxWidth: 640, classes: ['max-w-md', 'mx-4', 'p-4'] },
    tablet: { maxWidth: 768, classes: ['rounded-2xl', 'shadow-2xl'] },
    desktop: { maxWidth: 1024, classes: ['fixed', 'inset-0'] }
  }
  
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ breakpoints:')
  
  let allSupported = true
  
  Object.entries(breakpoints).forEach(([device, config]) => {
    const hasRequiredClasses = config.classes.length > 0
    const hasMaxWidth = config.maxWidth > 0
    
    console.log(`   ${hasRequiredClasses && hasMaxWidth ? '‚úÖ' : '‚ùå'} ${device}: ${config.maxWidth}px`)
    
    if (!hasRequiredClasses || !hasMaxWidth) allSupported = false
  })
  
  return allSupported
}

async function main() {
  try {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Paywall Modal...')
    
    const results = {
      productConfigurations: testProductConfigurations(),
      propsValidation: testPropsValidation(),
      paymentFlow: await testPaymentFlow(),
      stripeIntegration: await testStripeIntegration(),
      uiStates: testUIStates(),
      responsiveDesign: testResponsiveDesign()
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ PAYWALL MODAL')
    console.log('====================================')
    
    Object.entries(results).forEach(([key, passed]) => {
      const testName = key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .trim()
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${testName}`)
    })
    
    const passedTests = Object.values(results).filter(Boolean).length
    const totalTests = Object.keys(results).length
    const modalScore = Math.round((passedTests / totalTests) * 100)
    
    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ PAYWALL MODAL: ${modalScore}% (${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`)
    
    if (modalScore >= 85) {
      console.log('\nüéâ –®–ê–ì 11 –ó–ê–í–ï–†–®–ï–ù!')
      console.log('‚úÖ Paywall Modal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Stripe –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
      console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è props –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π')
      console.log('‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω')
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏')
      console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 12: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ DialogueWindow')
    } else {
      console.log('\n‚ö†Ô∏è  Paywall Modal —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

main() 