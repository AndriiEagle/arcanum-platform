// –¢–µ—Å—Ç –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù')
console.log('===================================')

// Mock —Ñ—É–Ω–∫—Ü–∏–∏ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockABTestService = {
  // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã (–∏–∑ —Å–µ—Ä–≤–∏—Å–∞)
  BASE_PRICES: {
    'token_limit': 2.00,
    'mascot': 1.00,
    'premium_subscription': 9.99
  },

  // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  PRICE_VARIANTS: {
    'token_limit': [
      { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' },
      { id: 'premium_20', multiplier: 1.2, label: '–ü—Ä–µ–º–∏—É–º +20%', description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
      { id: 'discount_25', multiplier: 0.75, label: '–°–∫–∏–¥–∫–∞ -25%', description: '–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞' },
      { id: 'psychological', multiplier: 0.99, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$1.99 –≤–º–µ—Å—Ç–æ $2.00' }
    ],
    'mascot': [
      { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $1.00' },
      { id: 'premium_50', multiplier: 1.5, label: '–ü—Ä–µ–º–∏—É–º +50%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $1.50' },
      { id: 'budget', multiplier: 0.5, label: '–ë—é–¥–∂–µ—Ç -50%', description: '–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ $0.50' }
    ],
    'premium_subscription': [
      { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ $9.99' },
      { id: 'premium', multiplier: 1.3, label: '–ü—Ä–µ–º–∏—É–º +30%', description: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ $12.99' },
      { id: 'launch_discount', multiplier: 0.7, label: '–°–∫–∏–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞', description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $6.99' },
      { id: 'psychological', multiplier: 0.95, label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è', description: '$9.49' }
    ]
  },

  // –°–∏–º—É–ª—è—Ü–∏—è —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏
  hashUserId: function(userId) {
    let hash = 0
    if (userId.length === 0) return hash
    
    for (let i = 0; i < userId.length; i++) {
      const char = userId.charCodeAt(i)
      hash = ((hash << 5) - hash) + char
      hash = hash & hash
    }
    
    return Math.abs(hash)
  },

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ü–µ–Ω—ã
  getPriceVariant: function(userId, testType) {
    console.log(`üß™ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–µ—Å—Ç ${testType}`)
    
    const basePrice = this.BASE_PRICES[testType]
    const variants = this.PRICE_VARIANTS[testType]
    
    if (!variants || variants.length === 0) {
      return {
        price: basePrice,
        variant: { id: 'control', multiplier: 1.0, label: '–ö–æ–Ω—Ç—Ä–æ–ª—å', description: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞' }
      }
    }
    
    const hash = this.hashUserId(userId + testType)
    const variantIndex = hash % variants.length
    const selectedVariant = variants[variantIndex]
    
    const testPrice = Number((basePrice * selectedVariant.multiplier).toFixed(2))
    
    console.log(`   ‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: ${selectedVariant.id}, —Ü–µ–Ω–∞: $${testPrice}`)
    
    return {
      price: testPrice,
      variant: selectedVariant,
      testResult: {
        userId,
        testType,
        variantId: selectedVariant.id,
        basePrice,
        testPrice,
        multiplier: selectedVariant.multiplier,
        timestamp: new Date()
      }
    }
  },

  // –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  simulateConversionMetrics: function(testType) {
    const variants = this.PRICE_VARIANTS[testType]
    
    return variants.map(variant => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ–º–æ
      const impressions = Math.floor(Math.random() * 100) + 50 // 50-150 –ø–æ–∫–∞–∑–æ–≤
      const clicks = Math.floor(impressions * (Math.random() * 0.3 + 0.1)) // 10-40% –∫–ª–∏–∫–æ–≤
      const conversions = Math.floor(clicks * (Math.random() * 0.2 + 0.05)) // 5-25% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
      const basePrice = this.BASE_PRICES[testType]
      const testPrice = basePrice * variant.multiplier
      const revenue = conversions * testPrice
      const conversionRate = impressions > 0 ? (conversions / impressions) * 100 : 0
      const averageOrderValue = conversions > 0 ? revenue / conversions : 0
      
      return {
        testType,
        variantId: variant.id,
        impressions,
        clicks,
        conversions,
        revenue: Number(revenue.toFixed(2)),
        conversionRate: Number(conversionRate.toFixed(2)),
        averageOrderValue: Number(averageOrderValue.toFixed(2))
      }
    })
  }
}

function testBasePrices() {
  console.log('\nüí∞ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
  
  const basePrices = mockABTestService.BASE_PRICES
  
  console.log('üìä –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã:')
  Object.entries(basePrices).forEach(([product, price]) => {
    console.log(`   - ${product}: $${price}`)
  })
  
  const hasAllPrices = basePrices['token_limit'] > 0 &&
                      basePrices['mascot'] > 0 &&
                      basePrices['premium_subscription'] > 0
  
  const pricesReasonable = basePrices['token_limit'] === 2.00 &&
                          basePrices['mascot'] === 1.00 &&
                          basePrices['premium_subscription'] === 9.99
  
  const isValidPrices = hasAllPrices && pricesReasonable
  
  console.log(`${isValidPrices ? '‚úÖ' : '‚ùå'} –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
  
  return isValidPrices
}

function testPriceVariants() {
  console.log('\nüéØ –¢–µ—Å—Ç 2: –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è A/B —Ç–µ—Å—Ç–æ–≤')
  
  const variants = mockABTestService.PRICE_VARIANTS
  
  console.log('üìä –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:')
  Object.entries(variants).forEach(([product, productVariants]) => {
    console.log(`   ${product}: ${productVariants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`)
    productVariants.forEach(variant => {
      const basePrice = mockABTestService.BASE_PRICES[product]
      const testPrice = (basePrice * variant.multiplier).toFixed(2)
      console.log(`     - ${variant.id}: $${testPrice} (${variant.multiplier}x)`)
    })
  })
  
  const hasVariantsForAllProducts = variants['token_limit']?.length >= 3 &&
                                   variants['mascot']?.length >= 3 &&
                                   variants['premium_subscription']?.length >= 3
  
  const hasControlVariant = variants['token_limit']?.some(v => v.id === 'control') &&
                           variants['mascot']?.some(v => v.id === 'control') &&
                           variants['premium_subscription']?.some(v => v.id === 'control')
  
  const isValidVariants = hasVariantsForAllProducts && hasControlVariant
  
  console.log(`${isValidVariants ? '‚úÖ' : '‚ùå'} –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
  
  return isValidVariants
}

function testHashConsistency() {
  console.log('\nüîí –¢–µ—Å—Ç 3: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏')
  
  const testUsers = ['user123', 'user456', 'user789']
  const testTypes = ['token_limit', 'mascot', 'premium_subscription']
  
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:')
  
  let allConsistent = true
  
  testUsers.forEach(userId => {
    testTypes.forEach(testType => {
      // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 3 —Ä–∞–∑–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
      const variant1 = mockABTestService.getPriceVariant(userId, testType)
      const variant2 = mockABTestService.getPriceVariant(userId, testType)
      const variant3 = mockABTestService.getPriceVariant(userId, testType)
      
      const isConsistent = variant1.variant.id === variant2.variant.id && 
                          variant2.variant.id === variant3.variant.id &&
                          variant1.price === variant2.price &&
                          variant2.price === variant3.price
      
      console.log(`   ${userId} + ${testType}: ${variant1.variant.id} ($${variant1.price}) - ${isConsistent ? '‚úÖ' : '‚ùå'}`)
      
      if (!isConsistent) allConsistent = false
    })
  })
  
  console.log(`${allConsistent ? '‚úÖ' : '‚ùå'} –•—ç—à-—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ`)
  
  return allConsistent
}

function testPriceDistribution() {
  console.log('\nüìà –¢–µ—Å—Ç 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º')
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userCount = 1000
  const testType = 'token_limit'
  const distribution = {}
  
  for (let i = 0; i < userCount; i++) {
    const userId = `user_${i}`
    const result = mockABTestService.getPriceVariant(userId, testType)
    
    if (!distribution[result.variant.id]) {
      distribution[result.variant.id] = 0
    }
    distribution[result.variant.id]++
  }
  
  console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
  const variants = mockABTestService.PRICE_VARIANTS[testType]
  const expectedPerVariant = userCount / variants.length
  
  let distributionValid = true
  
  Object.entries(distribution).forEach(([variantId, count]) => {
    const percentage = (count / userCount * 100).toFixed(1)
    const deviation = Math.abs(count - expectedPerVariant) / expectedPerVariant * 100
    
    console.log(`   - ${variantId}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${percentage}%)`)
    
    // –î–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ 20% –æ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if (deviation > 20) {
      distributionValid = false
    }
  })
  
  console.log(`${distributionValid ? '‚úÖ' : '‚ùå'} –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ`)
  
  return distributionValid
}

function testConversionMetrics() {
  console.log('\nüìä –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏')
  
  const testTypes = ['token_limit', 'mascot', 'premium_subscription']
  
  let allMetricsValid = true
  
  testTypes.forEach(testType => {
    console.log(`\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ${testType}:`)
    
    const metrics = mockABTestService.simulateConversionMetrics(testType)
    
    metrics.forEach(metric => {
      console.log(`   ${metric.variantId}:`)
      console.log(`     - –ü–æ–∫–∞–∑—ã: ${metric.impressions}`)
      console.log(`     - –ö–ª–∏–∫–∏: ${metric.clicks}`)
      console.log(`     - –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: ${metric.conversions}`)
      console.log(`     - –î–æ—Ö–æ–¥: $${metric.revenue}`)
      console.log(`     - –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${metric.conversionRate}%`)
      console.log(`     - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: $${metric.averageOrderValue}`)
      
      const isValidMetric = metric.impressions > 0 &&
                           metric.clicks <= metric.impressions &&
                           metric.conversions <= metric.clicks &&
                           metric.revenue >= 0 &&
                           metric.conversionRate >= 0 &&
                           metric.conversionRate <= 100
      
      if (!isValidMetric) allMetricsValid = false
    })
  })
  
  console.log(`${allMetricsValid ? '‚úÖ' : '‚ùå'} –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–Ω—ã`)
  
  return allMetricsValid
}

function testBestVariantSelection() {
  console.log('\nüèÜ –¢–µ—Å—Ç 6: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞')
  
  const testType = 'token_limit'
  const metrics = mockABTestService.simulateConversionMetrics(testType)
  
  console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
  metrics.forEach(metric => {
    console.log(`   ${metric.variantId}: –∫–æ–Ω–≤–µ—Ä—Å–∏—è ${metric.conversionRate}%, –¥–æ—Ö–æ–¥ $${metric.revenue}`)
  })
  
  // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ –¥–æ—Ö–æ–¥—É
  const bestByRevenue = metrics.reduce((best, current) => 
    current.revenue > best.revenue ? current : best
  )
  
  // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  const bestByConversion = metrics.reduce((best, current) => 
    current.conversionRate > best.conversionRate ? current : best
  )
  
  console.log(`ü•á –õ—É—á—à–∏–π –ø–æ –¥–æ—Ö–æ–¥—É: ${bestByRevenue.variantId} ($${bestByRevenue.revenue})`)
  console.log(`ü•á –õ—É—á—à–∏–π –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${bestByConversion.variantId} (${bestByConversion.conversionRate}%)`)
  
  const hasValidSelection = bestByRevenue.variantId && bestByConversion.variantId
  
  console.log(`${hasValidSelection ? '‚úÖ' : '‚ùå'} –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
  
  return hasValidSelection
}

async function main() {
  try {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω...')
    
    const results = {
      basePrices: testBasePrices(),
      priceVariants: testPriceVariants(),
      hashConsistency: testHashConsistency(),
      priceDistribution: testPriceDistribution(),
      conversionMetrics: testConversionMetrics(),
      bestVariantSelection: testBestVariantSelection()
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('======================================')
    
    Object.entries(results).forEach(([key, passed]) => {
      const testName = key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .trim()
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${testName}`)
    })
    
    const passedTests = Object.values(results).filter(Boolean).length
    const totalTests = Object.keys(results).length
    const abTestScore = Math.round((passedTests / totalTests) * 100)
    
    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: ${abTestScore}% (${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`)
    
    if (abTestScore >= 85) {
      console.log('\nüéâ –®–ê–ì 15 –ó–ê–í–ï–†–®–ï–ù!')
      console.log('‚úÖ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
      console.log('‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
      console.log('‚úÖ –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞')
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ paywall —Ç–æ—á–∫–∞–º–∏')
      console.log('\nüí° –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:')
      console.log('üìà +15-30% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞ —Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω')
      console.log('üí∞ +20-40% –¥–æ—Ö–æ–¥ –∑–∞ —Å—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏')
      console.log('üéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π')
      console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 16: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
    } else {
      console.log('\n‚ö†Ô∏è  A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

main() 