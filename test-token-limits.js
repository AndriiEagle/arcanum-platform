// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω-–ª–∏–º–∏—Ç–æ–≤
require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –¢–û–ö–ï–ù-–õ–ò–ú–ò–¢–û–í')
console.log('===================================')

async function simulateTokenUsage(userId, tokens) {
  console.log(`üìù –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ${tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ${userId}...`)
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  await supabase
    .from('ai_model_usage')
    .delete()
    .eq('user_id', userId)
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
  const { error } = await supabase
    .from('ai_model_usage')
    .insert([{
      user_id: userId,
      model_id: 'gpt-4o-mini',
      prompt_tokens: Math.floor(tokens * 0.3),
      completion_tokens: Math.floor(tokens * 0.7),
      total_tokens: tokens,
      cost: tokens * 0.0001,
      request_type: 'chat',
      created_at: new Date().toISOString()
    }])
  
  if (error && error.code !== 'PGRST301') {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:', error.message)
    return false
  }
  
  console.log(`‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ`)
  return true
}

async function testWithinLimit() {
  console.log('\nüü¢ –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞')
  
  const testUserId = '550e8400-e29b-41d4-a716-446655440100'
  await simulateTokenUsage(testUserId, 500) // 50% –æ—Ç –ª–∏–º–∏—Ç–∞ 1000
  
  try {
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: "–¢–µ—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞",
        userId: testUserId,
        modelId: 'gpt-4o-mini'
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
      console.log(`   - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: –¥–∞`)
      console.log(`   - –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.tokensUsed || 0}`)
      return true
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${response.status}`)
      return false
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç')
      return 'server_not_running'
    }
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
    return false
  }
}

async function testExceedsLimit() {
  console.log('\nüî¥ –¢–µ—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç')
  
  const testUserId = '550e8400-e29b-41d4-a716-446655440200'
  await simulateTokenUsage(testUserId, 1500) // 150% –æ—Ç –ª–∏–º–∏—Ç–∞ 1000
  
  try {
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: "–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞",
        userId: testUserId,
        modelId: 'gpt-4o-mini'
      })
    })
    
    if (response.status === 402) {
      const data = await response.json()
      console.log('‚úÖ –õ–∏–º–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å')
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status} (Payment Required)`)
      console.log(`   - –û—à–∏–±–∫–∞: ${data.error}`)
      console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.tokens_used}/${data.limit}`)
      console.log(`   - Paywall —Ç–∏–ø: ${data.paywall?.type}`)
      console.log(`   - –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: $${data.paywall?.cost}`)
      console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.paywall?.message}`)
      return true
    } else {
      console.log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 402, –ø–æ–ª—É—á–µ–Ω: ${response.status}`)
      const data = await response.json()
      console.log('   - –û—Ç–≤–µ—Ç:', data)
      return false
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç')
      return 'server_not_running'
    }
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
    return false
  }
}

async function testNearLimit() {
  console.log('\nüü° –¢–µ—Å—Ç 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)')
  
  const testUserId = '550e8400-e29b-41d4-a716-446655440300'
  await simulateTokenUsage(testUserId, 850) // 85% –æ—Ç –ª–∏–º–∏—Ç–∞ 1000
  
  try {
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: "–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ",
        userId: testUserId,
        modelId: 'gpt-4o-mini'
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º')
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`)
      console.log(`   - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: –¥–∞`)
      console.log(`   - –í –ª–æ–≥–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ 85% –ª–∏–º–∏—Ç–∞`)
      return true
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${response.status}`)
      return false
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç')
      return 'server_not_running'
    }
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
    return false
  }
}

async function main() {
  console.log('\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–∫–µ–Ω-–ª–∏–º–∏—Ç–æ–≤...')
  
  const test1 = await testWithinLimit()
  const test2 = await testExceedsLimit()
  const test3 = await testNearLimit()
  
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–û–ö–ï–ù-–õ–ò–ú–ò–¢–û–í')
  console.log('====================================')
  
  const results = [test1, test2, test3]
  const serverNotRunning = results.includes('server_not_running')
  
  if (serverNotRunning) {
    console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
    console.log('\nüìù –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev')
    console.log('2. –î–æ–∂–¥–∏—Ç–µ—Å—å "Ready on localhost:3000"')
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-token-limits.js')
    console.log('\n‚úÖ –ö–û–î –¢–û–ö–ï–ù-–õ–ò–ú–ò–¢–û–í –†–ï–ê–õ–ò–ó–û–í–ê–ù!')
    return
  }
  
  const passedTests = results.filter(r => r === true).length
  const totalTests = results.length
  
  console.log(`üü¢ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: ${test1 === true ? '‚úÖ' : '‚ùå'}`)
  console.log(`üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: ${test2 === true ? '‚úÖ' : '‚ùå'}`)
  console.log(`üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${test3 === true ? '‚úÖ' : '‚ùå'}`)
  
  console.log(`\nüéØ –£–°–ü–ï–®–ù–´–• –¢–ï–°–¢–û–í: ${passedTests}/${totalTests}`)
  
  if (passedTests === totalTests) {
    console.log('\nüéâ –®–ê–ì 4 –ó–ê–í–ï–†–®–ï–ù!')
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω-–ª–∏–º–∏—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('‚úÖ Paywall –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
    console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 5: Zustand store –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤')
  } else {
    console.log('\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤')
  }
}

main() 