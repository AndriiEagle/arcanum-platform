-- =================================================================
-- üîê –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ARCANUM PLATFORM
-- =================================================================
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ SQL Editor –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞

-- =================================================================
-- 1. –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –†–û–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
-- =================================================================
CREATE TABLE IF NOT EXISTS user_roles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('admin', 'user', 'premium')),
  permissions JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles(role);

-- =================================================================
-- 2. –ü–û–õ–ò–¢–ò–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (ROW LEVEL SECURITY)
-- =================================================================

-- –í–∫–ª—é—á–∞–µ–º RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–æ–ª–µ–π
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Ä–æ–ª—å
CREATE POLICY "Users can view own role" ON user_roles 
  FOR SELECT USING (auth.uid() = user_id);

-- –ü–æ–ª–∏—Ç–∏–∫–∞: –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ä–æ–ª–∏
CREATE POLICY "Admins can view all roles" ON user_roles 
  FOR SELECT USING (
    EXISTS (SELECT 1 FROM user_roles WHERE user_id = auth.uid() AND role = 'admin')
  );

-- –ü–æ–ª–∏—Ç–∏–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏
CREATE POLICY "Admins can manage all roles" ON user_roles 
  FOR ALL USING (
    EXISTS (SELECT 1 FROM user_roles WHERE user_id = auth.uid() AND role = 'admin')
  );

-- =================================================================
-- 3. –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–§–ò–õ–Ø
-- =================================================================
CREATE OR REPLACE FUNCTION create_user_profile()
RETURNS TRIGGER AS $$
BEGIN
  -- –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  INSERT INTO user_roles (user_id, role) 
  VALUES (NEW.id, 'user')
  ON CONFLICT (user_id) DO NOTHING;
  
  -- –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  INSERT INTO user_stats (user_id) 
  VALUES (NEW.id)
  ON CONFLICT (user_id) DO NOTHING;
  
  -- –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  INSERT INTO life_spheres (user_id, sphere_name, health_percentage) VALUES
    (NEW.id, '–ó–¥–æ—Ä–æ–≤—å–µ', 50),
    (NEW.id, '–ö–∞—Ä—å–µ—Ä–∞', 50),
    (NEW.id, '–§–∏–Ω–∞–Ω—Å—ã', 50),
    (NEW.id, '–û—Ç–Ω–æ—à–µ–Ω–∏—è', 50),
    (NEW.id, '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', 50)
  ON CONFLICT (user_id, sphere_name) DO NOTHING;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DROP TRIGGER IF EXISTS create_user_profile_trigger ON auth.users;
CREATE TRIGGER create_user_profile_trigger
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION create_user_profile();

-- =================================================================
-- 4. –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
-- =================================================================
CREATE OR REPLACE FUNCTION get_user_profile(user_uuid UUID)
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  SELECT row_to_json(profile_data)
  INTO result
  FROM (
    SELECT 
      u.id,
      u.email,
      u.raw_user_meta_data->>'name' as name,
      u.created_at,
      ur.role,
      ur.permissions
    FROM auth.users u
    LEFT JOIN user_roles ur ON u.id = ur.user_id
    WHERE u.id = user_uuid
  ) profile_data;
  
  RETURN COALESCE(result, '{}');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =================================================================
-- 5. –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –†–û–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
-- =================================================================
CREATE OR REPLACE FUNCTION check_user_role(user_uuid UUID, required_role VARCHAR)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM user_roles 
    WHERE user_id = user_uuid 
    AND (
      role = required_role OR 
      role = 'admin' -- –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
    )
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =================================================================
-- 6. –ù–ê–°–¢–†–û–ô–ö–ê –ê–î–ú–ò–ù–°–ö–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
-- =================================================================

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–æ–ª–∏ –ø–æ email
CREATE OR REPLACE FUNCTION set_admin_role(admin_email TEXT)
RETURNS BOOLEAN AS $$
DECLARE
  user_uuid UUID;
BEGIN
  -- –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  SELECT id INTO user_uuid 
  FROM auth.users 
  WHERE email = admin_email;
  
  IF user_uuid IS NOT NULL THEN
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    INSERT INTO user_roles (user_id, role, permissions)
    VALUES (user_uuid, 'admin', '{"all": true, "manage_users": true, "view_analytics": true}')
    ON CONFLICT (user_id) 
    DO UPDATE SET 
      role = 'admin',
      permissions = '{"all": true, "manage_users": true, "view_analytics": true}',
      updated_at = NOW();
    
    RETURN TRUE;
  END IF;
  
  RETURN FALSE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =================================================================
-- 7. GRANT –†–ê–ó–†–ï–®–ï–ù–ò–Ø
-- =================================================================

-- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
GRANT USAGE ON SCHEMA public TO anon;
GRANT SELECT, INSERT ON user_roles TO anon;

-- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON user_roles TO authenticated;

-- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª–∏
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;

-- =================================================================
-- 8. –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
-- =================================================================

/*
üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –ü–û–°–õ–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê:

1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å –≤–∞—à–∏–º email
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: SELECT set_admin_role('your-email@example.com');
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–ª—å: SELECT * FROM user_roles WHERE user_id = (SELECT id FROM auth.users WHERE email = 'your-email@example.com');

üìã –ü–û–õ–ï–ó–ù–´–ï –ó–ê–ü–†–û–°–´:

-- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–∏:
SELECT u.email, ur.role, ur.created_at 
FROM auth.users u 
LEFT JOIN user_roles ur ON u.id = ur.user_id;

-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞:
SELECT check_user_role((SELECT id FROM auth.users WHERE email = 'your-email@example.com'), 'admin');

-- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
SELECT get_user_profile((SELECT id FROM auth.users WHERE email = 'your-email@example.com'));

üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
- –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—â–∏—â–µ–Ω—ã Row Level Security
- –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ  
- –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!
*/ 