import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase')
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ –µ—Å—Ç—å:')
  console.log('NEXT_PUBLIC_SUPABASE_URL=your_supabase_url')
  console.log('SUPABASE_SERVICE_KEY=your_service_key')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupSupabaseStorage() {
  console.log('üöÄ –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE STORAGE')
  console.log('============================\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ buckets
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö buckets...')
    const { data: existingBuckets, error: listError } = await supabase.storage.listBuckets()
    
    if (listError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ buckets:', listError.message)
      return
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ buckets: ${existingBuckets?.length || 0}`)
    existingBuckets?.forEach(bucket => {
      console.log(`   - ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`)
    })

    // 2. –°–æ–∑–¥–∞–µ–º bucket public-assets –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const publicAssetsBucket = existingBuckets?.find(b => b.name === 'public-assets')
    
    if (!publicAssetsBucket) {
      console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ bucket public-assets...')
      
      const { data: createData, error: createError } = await supabase.storage.createBucket('public-assets', {
        public: true,
        fileSizeLimit: 10 * 1024 * 1024, // 10MB
        allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
      })

      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', createError.message)
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ SQL
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ SQL...')
        await createBucketViaSQL()
      } else {
        console.log('‚úÖ Bucket public-assets —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      }
    } else {
      console.log('\n2Ô∏è‚É£ Bucket public-assets —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏—á–Ω—ã–π –ª–∏ –æ–Ω
      if (!publicAssetsBucket.public) {
        console.log('üîÑ –î–µ–ª–∞–µ–º bucket –ø—É–±–ª–∏—á–Ω—ã–º...')
        await makeBucketPublicViaSQL()
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    console.log('\n3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞...')
    await setupStoragePolicies()

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...')
    await testImageUpload()

    console.log('\n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!')
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.')

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

async function createBucketViaSQL() {
  const createBucketSQL = `
    INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
    VALUES (
      'public-assets',
      'public-assets',
      true,
      10485760,
      '{"image/png","image/jpeg","image/gif","image/webp"}'
    )
    ON CONFLICT (id) DO NOTHING;
  `

  const { data, error } = await supabase.rpc('exec_sql', { sql_query: createBucketSQL })
  
  if (error) {
    console.error('‚ùå SQL —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message)
  } else {
    console.log('‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ SQL')
  }
}

async function makeBucketPublicViaSQL() {
  const makePublicSQL = `
    UPDATE storage.buckets 
    SET public = true 
    WHERE id = 'public-assets';
  `

  const { data, error } = await supabase.rpc('exec_sql', { sql_query: makePublicSQL })
  
  if (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å bucket –ø—É–±–ª–∏—á–Ω—ã–º:', error.message)
  } else {
    console.log('‚úÖ Bucket —Å–¥–µ–ª–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–º')
  }
}

async function setupStoragePolicies() {
  const policies = [
    {
      name: '–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ',
      sql: `
        CREATE POLICY IF NOT EXISTS "Public read access" 
        ON storage.objects 
        FOR SELECT 
        USING (bucket_id = 'public-assets');
      `
    },
    {
      name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
      sql: `
        CREATE POLICY IF NOT EXISTS "Authenticated users can upload" 
        ON storage.objects 
        FOR INSERT 
        WITH CHECK (
          bucket_id = 'public-assets' 
          AND auth.role() = 'authenticated'
        );
      `
    },
    {
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã',
      sql: `
        CREATE POLICY IF NOT EXISTS "Users can update own files" 
        ON storage.objects 
        FOR UPDATE 
        WITH CHECK (
          bucket_id = 'public-assets' 
          AND auth.uid()::text = (storage.foldername(name))[1]
        );
      `
    },
    {
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã',
      sql: `
        CREATE POLICY IF NOT EXISTS "Users can delete own files" 
        ON storage.objects 
        FOR DELETE 
        USING (
          bucket_id = 'public-assets' 
          AND auth.uid()::text = (storage.foldername(name))[1]
        );
      `
    }
  ]

  for (const policy of policies) {
    console.log(`   üìù –°–æ–∑–¥–∞–Ω–∏–µ: ${policy.name}`)
    const { error } = await supabase.rpc('exec_sql', { sql_query: policy.sql })
    
    if (error) {
      console.log(`   ‚ö†Ô∏è ${policy.name}: ${error.message}`)
    } else {
      console.log(`   ‚úÖ ${policy.name}: —Å–æ–∑–¥–∞–Ω–∞`)
    }
  }
}

async function testImageUpload() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 PNG)
    const testImageBlob = new Blob([
      new Uint8Array([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 dimensions
        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, // rest of IHDR
        0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
        0x08, 0xD7, 0x63, 0xF8, 0x0F, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x5C, 0xC2, 0xD2, 0x34, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND
      ])
    ], { type: 'image/png' })

    const testFileName = `test/test-upload-${Date.now()}.png`

    console.log('   üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...')
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('public-assets')
      .upload(testFileName, testImageBlob, {
        cacheControl: '300',
        upsert: true,
        contentType: 'image/png'
      })

    if (uploadError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', uploadError.message)
      return
    }

    console.log('   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData.path)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('public-assets')
      .getPublicUrl(testFileName)

    console.log('   üåê –ü—É–±–ª–∏—á–Ω—ã–π URL:', urlData.publicUrl)

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    console.log('   üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...')
    await supabase.storage
      .from('public-assets')
      .remove([testFileName])

    console.log('   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupSupabaseStorage()
