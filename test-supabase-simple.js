// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const openaiKey = process.env.OPENAI_API_KEY

console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô')
console.log('===============================')

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üåê Supabase URL:', supabaseUrl ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
console.log('üîë Supabase Key:', supabaseKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
console.log('ü§ñ OpenAI Key:', openaiKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ Supabase!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testSupabaseConnection() {
  console.log('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase...')
  
  try {
    // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç - –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const { data, error } = await supabase
      .from('ui_layouts')
      .select('*')
      .limit(1)

    if (error) {
      if (error.code === 'PGRST116') {
        console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω! (–¢–∞–±–ª–∏—Ü–∞ ui_layouts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')
        return { connected: true, tableExists: false }
      } else if (error.code === 'PGRST301') {
        console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω! (RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)')
        return { connected: true, tableExists: true }
      } else {
        console.log('‚ö†Ô∏è  Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞:', error.message)
        return { connected: true, tableExists: false, error: error.message }
      }
    } else {
      console.log('‚úÖ Supabase –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
      console.log('üìä –ó–∞–ø–∏—Å–µ–π –≤ ui_layouts:', data?.length || 0)
      return { connected: true, tableExists: true, hasData: true }
    }
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', e.message)
    return { connected: false, error: e.message }
  }
}

async function testLifeSpheresTable() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã life_spheres...')
  
  try {
    const { data, error } = await supabase
      .from('life_spheres')
      .select('*')
      .limit(1)

    if (error) {
      if (error.code === 'PGRST116') {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ life_spheres –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return false
      } else if (error.code === 'PGRST301') {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ life_spheres —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (RLS –∞–∫—Ç–∏–≤–µ–Ω)')
        return true
      } else {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ life_spheres: –ø—Ä–æ–±–ª–µ–º–∞ -', error.message)
        return false
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ life_spheres —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      console.log('üìä –ó–∞–ø–∏—Å–µ–π:', data?.length || 0)
      return true
    }
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ life_spheres:', e.message)
    return false
  }
}

async function testOpenAI() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI...')
  
  if (!openaiKey) {
    console.log('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    return false
  }

  try {
    const response = await fetch('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json'
      }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      console.log('üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π:', data.data?.length || 0)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–¥–µ–ª–∏
      const modelIds = data.data?.map(m => m.id) || []
      const keyModels = ['gpt-4o-mini', 'gpt-4o', 'gpt-4']
      console.log('\nüéØ –ö–ª—é—á–µ–≤—ã–µ –º–æ–¥–µ–ª–∏:')
      keyModels.forEach(model => {
        console.log(`${modelIds.includes(model) ? '‚úÖ' : '‚ùå'} ${model}`)
      })
      
      return true
    } else {
      const errorText = await response.text()
      console.log('‚ùå OpenAI –æ—à–∏–±–∫–∞:', response.status, errorText)
      return false
    }
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ OpenAI:', e.message)
    return false
  }
}

async function main() {
  try {
    const supabaseResult = await testSupabaseConnection()
    const lifeSpheres = await testLifeSpheresTable()
    const openaiResult = await testOpenAI()

    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°')
    console.log('==================')
    
    const supabaseOk = supabaseResult.connected
    const tablesOk = supabaseResult.tableExists || lifeSpheres
    const openaiOk = openaiResult

    console.log(`üåê Supabase: ${supabaseOk ? '‚úÖ' : '‚ùå'}`)
    console.log(`üìä –¢–∞–±–ª–∏—Ü—ã: ${tablesOk ? '‚úÖ' : '‚ùå'}`)
    console.log(`ü§ñ OpenAI: ${openaiOk ? '‚úÖ' : '‚ùå'}`)

    const readyComponents = [supabaseOk, tablesOk, openaiOk].filter(Boolean).length
    const readiness = Math.round((readyComponents / 3) * 100)

    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨: ${readiness}%`)

    if (readiness === 100) {
      console.log('üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!')
    } else if (readiness >= 67) {
      console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞')
    } else {
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
    }

    if (!tablesOk) {
      console.log('\nüîß –ù–£–ñ–ù–û –í–´–ü–û–õ–ù–ò–¢–¨:')
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard')
      console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: ixerlqcqwpevjpycwkwv')
      console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
      console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ supabase/migrations/')
    }

    process.exit(readiness >= 67 ? 0 : 1)

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

main() 