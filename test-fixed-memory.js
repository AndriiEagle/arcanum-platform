console.log('üî• –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ü–ê–ú–Ø–¢–ò –ò–ò')
console.log('============================')

const userId = '5c182cab-c364-43f0-b7c8-584c5e02c7f2'
const vercelURL = 'https://arcanum-platform.vercel.app'

async function testFixedMemory() {
  try {
    console.log('\n‚è±Ô∏è –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ Vercel —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...')
    await new Promise(resolve => setTimeout(resolve, 30000))
    
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ò–ò...')
    
    const testQuestions = [
      '–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –º–æ–µ–π —Ü–µ–ª–∏ –≤ —Å—Ñ–µ—Ä–µ S9 - —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞–ø–∏—Ç–∞–ª',
      '–ö–∞–∫–∞—è —É –º–µ–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å –∏ –∫–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω?',
      '–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ü–µ–ª–∏ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ñ–µ—Ä–∞–º S1-S9'
    ]
    
    for (let i = 0; i < testQuestions.length; i++) {
      const question = testQuestions[i]
      console.log(`\n${i+1}Ô∏è‚É£ –í–æ–ø—Ä–æ—Å: "${question}"`)
      
      try {
        const response = await fetch(`${vercelURL}/api/chat`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: question,
            userId: userId,
            model: 'gpt-4o-mini'
          })
        })
        
        if (response.ok) {
          const data = await response.json()
          const aiResponse = data.response || ''
          
          console.log('‚úÖ –ò–ò –æ—Ç–≤–µ—Ç–∏–ª!')
          console.log('üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):')
          console.log('"' + aiResponse.substring(0, 300) + '..."')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –ò–ò –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ
          const checks = [
            { keyword: '2000', description: '—Ü–µ–ª—å $2000' },
            { keyword: '$2000', description: '—Ç–æ—á–Ω—É—é —Å—É–º–º—É $2000' },
            { keyword: '24.01.2026', description: '—Ç–æ—á–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω' },
            { keyword: '2026', description: '–≥–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞' },
            { keyword: '–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', description: '—Ç–∏–ø –¥–æ—Ö–æ–¥–∞' },
            { keyword: '–ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞', description: '—Ç–∏–ø –¥–æ—Ö–æ–¥–∞ (—Å–∫–ª–æ–Ω–µ–Ω–∏–µ)' },
            { keyword: '–ê–ê–ê+', description: '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ê–ê–ê+' }
          ]
          
          let foundReal = 0
          checks.forEach(check => {
            if (aiResponse.includes(check.keyword)) {
              console.log(`  ‚úÖ –£–ø–æ–º—è–Ω—É–ª ${check.description}`)
              foundReal++
            }
          })
          
          if (foundReal >= 2) {
            console.log(`üéâ –£–°–ü–ï–•! –ò–ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ –ø–∞–º—è—Ç—å (${foundReal}/7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)`)
          } else if (foundReal >= 1) {
            console.log(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö (${foundReal}/7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)`)
          } else {
            console.log(`‚ùå –ò–ò –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å (0/7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)`)
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–ª—è—Ç—å—Å—è
          const badPhrases = [
            '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            '–¥–æ–±–∞–≤—å —Ü–µ–ª—å –≤ –ª—é–±–æ–π —Å—Ñ–µ—Ä–µ',
            'S1 (50%), S2 (50%), S3 (50%)'
          ]
          
          badPhrases.forEach(phrase => {
            if (aiResponse.includes(phrase)) {
              console.log(`  ‚ùå –í—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—Ä–∞–∑—É: "${phrase}"`)
            }
          })
          
        } else if (response.status === 402) {
          console.log('‚ö†Ô∏è –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (402) - –æ–∂–∏–¥–∞–µ–º–æ')
        } else {
          console.log('‚ùå API –æ—à–∏–±–∫–∞:', response.status)
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
      if (i < testQuestions.length - 1) {
        console.log('\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...')
        await new Promise(resolve => setTimeout(resolve, 5000))
      }
    }
    
  } catch (error) {
    console.log('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedMemory().then(() => {
  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!')
  console.log('\nüìã –ò–¢–û–ì:')
  console.log('–ï—Å–ª–∏ –ò–ò —É–ø–æ–º–∏–Ω–∞–µ—Ç $2000, 2026, –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!')
  console.log('–ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
}).catch(err => {
  console.error('üí• –û—à–∏–±–∫–∞:', err)
}) 