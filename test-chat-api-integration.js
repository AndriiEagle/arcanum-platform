// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ Chat API
require('dotenv').config({ path: '.env.local' })

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CHAT API + TOKEN LOGGING')
console.log('======================================')

async function testChatApiWithLogging() {
  console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Chat API —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...')
  
  const testRequest = {
    message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –∫–∞—Ä—å–µ—Ä–µ?",
    userId: "550e8400-e29b-41d4-a716-446655440000", // Valid UUID
    modelId: "gpt-4o-mini"
  }
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ–Ω–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Next.js dev server –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...')
    
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testRequest)
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      console.log(`‚ùå API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`)
      return false
    }
    
    const data = await response.json()
    
    console.log('‚úÖ Chat API —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å')
    console.log(`   - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${data.response?.substring(0, 100)}...`)
    console.log(`   - –ú–æ–¥–µ–ª—å: ${data.modelUsed}`)
    console.log(`   - –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.tokensUsed}`)
    console.log(`   - –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: ${data.commandType}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    if (data.tokensUsed > 0) {
      console.log('üí∞ –¢–æ–∫–µ–Ω—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å')
      
      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω)
      console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)')
      
      return true
    } else {
      console.log('‚ö†Ô∏è  –¢–æ–∫–µ–Ω—ã –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã')
      return false
    }
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  Next.js —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:')
      console.log('   npm run dev')
      console.log('   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞')
      return 'server_not_running'
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
      return false
    }
  }
}

async function testHealthcheck() {
  console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API...')
  
  try {
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'GET'
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Chat API –¥–æ—Å—Ç—É–ø–µ–Ω')
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${data.status}`)
      console.log(`   - –í–µ—Ä—Å–∏—è: ${data.version}`)
      console.log(`   - OpenAI –∫–ª—é—á: ${data.hasApiKey ? '‚úÖ' : '‚ùå'}`)
      console.log(`   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: ${data.supportedModels?.length || 0}`)
      return true
    } else {
      console.log('‚ùå Chat API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.status)
      return false
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      return 'server_not_running'
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
      return false
    }
  }
}

async function main() {
  console.log('\nüîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...')
  
  const healthcheck = await testHealthcheck()
  
  if (healthcheck === 'server_not_running') {
    console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('==========================================')
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª')
    console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cd arcanum-platform')
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run dev')
    console.log('4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ "Ready on localhost:3000"')
    console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-chat-api-integration.js')
    console.log('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.')
    return
  }
  
  if (!healthcheck) {
    console.log('\n‚ùå Healthcheck –ø—Ä–æ–≤–∞–ª–µ–Ω - –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    return
  }
  
  const apiTest = await testChatApiWithLogging()
  
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò')
  console.log('=================================')
  console.log(`üè• API Healthcheck: ${healthcheck ? '‚úÖ' : '‚ùå'}`)
  console.log(`üí¨ Chat API + Logging: ${apiTest === true ? '‚úÖ' : apiTest === 'server_not_running' ? '‚è≥' : '‚ùå'}`)
  
  if (apiTest === true) {
    console.log('\nüéâ –®–ê–ì 3 –ó–ê–í–ï–†–®–ï–ù!')
    console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ Chat API')
    console.log('‚úÖ calculateCost —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
    console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–∞')
    console.log('\n‚û°Ô∏è  –ì–û–¢–û–í –ö –®–ê–ì–£ 4: –ë–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω-–ª–∏–º–∏—Ç—ã')
  } else {
    console.log('\n‚ö†Ô∏è  –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä')
  }
}

main() 