const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY

if (!supabaseServiceKey || !supabaseUrl) {
  console.error('‚ùå –ö–ª—é—á–∏ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runSQLMigration() {
  console.log('üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï SQL –ú–ò–ì–†–ê–¶–ò–ò')
  console.log('========================')
  
  const migrationSQL = `
    -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ sphere_details –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ñ–µ—Ä–∞—Ö
    ALTER TABLE life_spheres 
    ADD COLUMN IF NOT EXISTS sphere_details JSONB DEFAULT '{}'::jsonb;

    -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É JSONB
    CREATE INDEX IF NOT EXISTS idx_life_spheres_sphere_details 
    ON life_spheres USING GIN (sphere_details);
  `
  
  try {
    console.log('üí´ –í—ã–ø–æ–ª–Ω—è—é SQL –º–∏–≥—Ä–∞—Ü–∏—é...')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –Ω–∞–ø—Ä—è–º—É—é
    const { data, error } = await supabase.rpc('sql', { query: migrationSQL })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error)
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      console.log('üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...')
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const { data: columns, error: colError } = await supabase
        .from('information_schema.columns')
        .select('column_name')
        .eq('table_name', 'life_spheres')
        .eq('table_schema', 'public')
      
      if (colError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', colError)
        return false
      }
      
      console.log('üìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã life_spheres:')
      columns.forEach(col => console.log(`  - ${col.column_name}`))
      
      const hasDetailsColumn = columns.some(col => col.column_name === 'sphere_details')
      
      if (hasDetailsColumn) {
        console.log('‚úÖ –ü–æ–ª–µ sphere_details —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return true
      } else {
        console.log('‚ùå –ü–æ–ª–µ sphere_details –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        console.log('üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ sphere_details –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard')
        console.log('üìã SQL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Supabase SQL Editor:')
        console.log(`
ALTER TABLE life_spheres 
ADD COLUMN sphere_details JSONB DEFAULT '{}'::jsonb;

CREATE INDEX idx_life_spheres_sphere_details 
ON life_spheres USING GIN (sphere_details);
        `)
        return false
      }
    }
    
    console.log('‚úÖ SQL –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    return true
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return false
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runSQLMigration().then(success => {
  if (success) {
    console.log('\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä')
  } else {
    console.log('\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç')
  }
})
