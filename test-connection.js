const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE')
console.log('================================')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://ixerlqcqwpevjpycwkwv.supabase.co'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY

console.log('üåê URL:', supabaseUrl)
console.log('üîë Service Key:', supabaseServiceKey ? '–ù–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù')
console.log('üêõ DEBUG - All env vars related to SUPABASE:')
Object.keys(process.env).filter(key => key.includes('SUPABASE')).forEach(key => {
  console.log(`   ${key}: ${process.env[key] ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`)
})

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!')
  console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç: SUPABASE_SERVICE_KEY=–≤–∞—à_–∫–ª—é—á')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testConnection() {
  try {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
    
    const { data, error } = await supabase
      .from('life_spheres')
      .select('id, sphere_name, sphere_code')
      .limit(3)
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
      return false
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ñ–µ—Ä:', data?.length || 0)
    
    if (data && data.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ñ–µ—Ä:')
      data.forEach(sphere => {
        console.log(`  - ${sphere.sphere_code || 'NO_CODE'}: ${sphere.sphere_name}`)
      })
    }
    
    return true
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return false
  }
}

testConnection().then(success => {
  if (success) {
    console.log('\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏–º–ø–æ—Ä—Ç—É.')
  } else {
    console.log('\nüíÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
  }
})
