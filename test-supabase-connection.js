// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
// –ó–∞–ø—É—Å–∫: node test-supabase-connection.js

require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE')
console.log('=====================================')

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE!')
  console.log('URL:', supabaseUrl ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  console.log('KEY:', supabaseKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üåê URL:', supabaseUrl)
console.log('üîë API Key:', supabaseKey.substring(0, 20) + '...')

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
const requiredTables = [
  'ui_layouts',
  'life_spheres', 
  'user_stats',
  'user_tasks',
  'sphere_categories',
  'generated_mascots',
  'user_buffs',
  'ai_model_usage',
  'scheduled_rewards'
]

async function checkConnection() {
  try {
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const { data, error } = await supabase
      .rpc('get_public_tables', {}, { count: 'exact' })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
      return false
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!')
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public: ${data.length}`)

    return data
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message)
    return false
  }
}

async function checkTables(existingTables) {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶')
  console.log('==================')

  const tableNames = existingTables.map(t => t.table_name)
  const results = {
    existing: [],
    missing: []
  }

  for (const tableName of requiredTables) {
    if (tableNames.includes(tableName)) {
      console.log(`‚úÖ ${tableName} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
      results.existing.push(tableName)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      try {
        const { count, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true })
        
        if (!error) {
          console.log(`   üìù –ó–∞–ø–∏—Å–µ–π: ${count || 0}`)
        }
      } catch (e) {
        console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–µ–π: ${e.message}`)
      }
    } else {
      console.log(`‚ùå ${tableName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
      results.missing.push(tableName)
    }
  }

  return results
}

async function testBasicOperations() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô')
  console.log('=================================')

  // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  try {
    const { data: { user }, error } = await supabase.auth.getUser()
    if (user) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)
    } else {
      console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª—é—á–∞)')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è  Auth –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞:', e.message)
  }

  // –¢–µ—Å—Ç RLS –ø–æ–ª–∏—Ç–∏–∫ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
  try {
    const { data, error } = await supabase
      .from('ui_layouts')
      .select('*')
      .limit(1)

    if (error && error.code === 'PGRST301') {
      console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã (–ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞)')
    } else if (!error) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ ui_layouts —Ä–∞–±–æ—Ç–∞–µ—Ç')
    } else {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ui_layouts:', error.message)
    }
  } catch (e) {
    console.log('‚ö†Ô∏è  –¢–µ—Å—Ç ui_layouts –ø—Ä–æ–ø—É—â–µ–Ω:', e.message)
  }
}

async function checkOpenAI() {
  console.log('\nü§ñ –ü–†–û–í–ï–†–ö–ê OPENAI API')
  console.log('======================')

  const openaiKey = process.env.OPENAI_API_KEY
  if (!openaiKey) {
    console.log('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    return false
  }

  console.log('üîë OpenAI Key:', openaiKey.substring(0, 20) + '...')
  
  try {
    const response = await fetch('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${openaiKey}`
      }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω!')
      console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${data.data.length}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      const modelIds = data.data.map(m => m.id)
      const ourModels = ['gpt-4o-mini', 'gpt-4o', 'gpt-4-turbo', 'gpt-4']
      
      console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π:')
      ourModels.forEach(model => {
        if (modelIds.includes(model)) {
          console.log(`‚úÖ ${model} - –¥–æ—Å—Ç—É–ø–Ω–∞`)
        } else {
          console.log(`‚ùå ${model} - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`)
        }
      })
      
      return true
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ OpenAI API:', response.status, response.statusText)
      return false
    }
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI:', e.message)
    return false
  }
}

async function generateReport(tableResults, supabaseOk, openaiOk) {
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢')
  console.log('==================')

  console.log(`üåê Supabase: ${supabaseOk ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`)
  console.log(`ü§ñ OpenAI: ${openaiOk ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`)
  console.log(`üìä –¢–∞–±–ª–∏—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${tableResults.existing.length}/${requiredTables.length}`)
  console.log(`‚ùå –¢–∞–±–ª–∏—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${tableResults.missing.length}`)

  if (tableResults.missing.length > 0) {
    console.log('\nüîß –¢–†–ï–ë–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:')
    console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Supabase Dashboard:')
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard')
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:')
    console.log('   - supabase/migrations/0000_initial_schema.sql')
    console.log('   - supabase/migrations/0001_additional_tables.sql')
  }

  const totalScore = (
    (supabaseOk ? 50 : 0) + 
    (openaiOk ? 30 : 0) + 
    (tableResults.existing.length / requiredTables.length * 20)
  )

  console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´: ${Math.round(totalScore)}%`)
  
  if (totalScore >= 90) {
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
  } else if (totalScore >= 70) {
    console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞, –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏')
  } else {
    console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
  }

  return totalScore
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const existingTables = await checkConnection()
    if (!existingTables) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase')
      process.exit(1)
    }

    const tableResults = await checkTables(existingTables)
    await testBasicOperations()
    const openaiOk = await checkOpenAI()

    const readiness = await generateReport(tableResults, true, openaiOk)
    
    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(readiness >= 70 ? 0 : 1)

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

main() 