// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase
const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
const SUPABASE_URL = 'https://ixerlqcqwpevjpycwkwv.supabase.co'
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4ZXJscWNxd3BldmpweWN3a3d2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MTgzOTY3MSwiZXhwIjoyMDU3NDE1NjcxfQ.hkmU-K-tUZxKivWkoHmUwDS6QvZ4HuCYWSvVacs2YA0'

async function createTablesAutomatically() {
  console.log('üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ SUPABASE')
  console.log('==========================================')
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service key –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
      persistSession: false,
      autoRefreshToken: false
    }
  })
  
  console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å service key')
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    const migration1Path = path.join(__dirname, 'supabase/migrations/0000_initial_schema.sql')
    const migration2Path = path.join(__dirname, 'supabase/migrations/0001_additional_tables.sql')
    
    if (!fs.existsSync(migration1Path) || !fs.existsSync(migration2Path)) {
      console.log('‚ùå –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
      return
    }
    
    const migration1 = fs.readFileSync(migration1Path, 'utf8')
    const migration2 = fs.readFileSync(migration2Path, 'utf8')
    
    console.log('üìÑ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ HTTP API –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...')
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ SQL –∫–æ–º–∞–Ω–¥—ã
    const allSQL = migration1 + '\n\n' + migration2
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = allSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))
      .map(cmd => cmd + ';')
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`)
    
    let successCount = 0
    let errorCount = 0
    const errors = []
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ REST API
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i]
      console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}...`)
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º rpc –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ SQL
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
            'apikey': SUPABASE_SERVICE_KEY
          },
          body: JSON.stringify({
            sql: command
          })
        })
        
        if (response.ok) {
          successCount++
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        } else {
          const errorData = await response.text()
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
          if (errorData.includes('already exists') || errorData.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
            successCount++
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–û–ö)`)
          } else {
            errorCount++
            errors.push(`–ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${errorData}`)
            console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –æ—à–∏–±–∫–∞: ${errorData.substring(0, 100)}...`)
          }
        }
      } catch (error) {
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
        try {
          const result = await supabase.rpc('exec_sql', { sql: command })
          if (result.error) {
            if (result.error.message.includes('already exists')) {
              successCount++
              console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–û–ö)`)
            } else {
              errorCount++
              errors.push(`–ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${result.error.message}`)
              console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –æ—à–∏–±–∫–∞: ${result.error.message}`)
            }
          } else {
            successCount++
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
          }
        } catch (finalError) {
          errorCount++
          errors.push(`–ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${finalError.message}`)
          console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${finalError.message}`)
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100))
    }
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:')
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${commands.length}`)
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}/${commands.length}`)
    
    if (errors.length > 0) {
      console.log('\n‚ö†Ô∏è –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:')
      errors.forEach(error => console.log(`   ${error}`))
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶:')
    await checkCreatedTables(supabase)
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

async function checkCreatedTables(supabase) {
  const expectedTables = [
    'ui_layouts',
    'life_spheres',
    'user_stats',
    'user_tasks', 
    'sphere_categories',
    'generated_mascots',
    'user_buffs',
    'ai_model_usage',
    'scheduled_rewards'
  ]
  
  let createdTables = []
  let missingTables = []
  
  for (const tableName of expectedTables) {
    try {
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1)
      
      if (error) {
        if (error.code === 'PGRST116' || error.message.includes('does not exist')) {
          missingTables.push(tableName)
          console.log(`‚ùå ${tableName} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        } else {
          console.log(`‚ö†Ô∏è ${tableName} - –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`)
        }
      } else {
        createdTables.push(tableName)
        console.log(`‚úÖ ${tableName} - —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`)
      }
    } catch (e) {
      missingTables.push(tableName)
      console.log(`‚ùå ${tableName} - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${e.message}`)
    }
  }
  
  console.log(`\nüéØ –ò–¢–û–ì–û:`)
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: ${createdTables.length}/${expectedTables.length}`)
  console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${missingTables.length}/${expectedTables.length}`)
  
  if (createdTables.length === expectedTables.length) {
    console.log('\nüéâ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!')
    console.log('üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await createInitialData(supabase)
    
    console.log('\n‚ú® ARCANUM PLATFORM –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!')
    console.log('üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: npm run dev')
    
  } else if (createdTables.length > 0) {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –Ω–µ –≤—Å–µ')
    console.log('üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤—Ä—É—á–Ω—É—é')
    
  } else {
    console.log('\n‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã')
    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase Dashboard')
  }
}

async function createInitialData(supabase) {
  console.log('\nüå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É user_id)
    const demoUserId = '00000000-0000-0000-0000-000000000000'
    
    const initialSpheres = [
      {
        user_id: demoUserId,
        sphere_name: '–ó–¥–æ—Ä–æ–≤—å–µ',
        health_percentage: 78,
        resonance_degree: 0.85,
        is_active: true,
        global_goal: '–î–æ—Å—Ç–∏—á—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è'
      },
      {
        user_id: demoUserId,
        sphere_name: '–ö–∞—Ä—å–µ—Ä–∞',
        health_percentage: 92,
        resonance_degree: 0.92,
        is_active: true,
        global_goal: '–°—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏—á—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞'
      },
      {
        user_id: demoUserId,
        sphere_name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è',
        health_percentage: 65,
        resonance_degree: 0.70,
        is_active: true,
        global_goal: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –∏ –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏'
      },
      {
        user_id: demoUserId,
        sphere_name: '–§–∏–Ω–∞–Ω—Å—ã',
        health_percentage: 88,
        resonance_degree: 0.89,
        is_active: true,
        global_goal: '–î–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏'
      }
    ]
    
    const { error: spheresError } = await supabase
      .from('life_spheres')
      .upsert(initialSpheres, { onConflict: 'user_id,sphere_name' })
    
    if (!spheresError) {
      console.log('‚úÖ –î–µ–º–æ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã')
    } else {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Å—Ñ–µ—Ä:', spheresError.message)
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: statsError } = await supabase
      .from('user_stats')
      .upsert({
        user_id: demoUserId,
        level: 15,
        current_xp: 2340,
        next_level_xp: 3000,
        energy: 85,
        total_tokens_used: 0,
        total_cost_spent: 0,
        current_streak: 3,
        longest_streak: 7
      }, { onConflict: 'user_id' })
    
    if (!statsError) {
      console.log('‚úÖ –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞')
    } else {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError.message)
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü Supabase...')
createTablesAutomatically().catch(console.error) 