// üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ó–ê–ì–†–£–ó–ö–ò –ê–í–ê–¢–ê–†–û–í
// ===================================

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testAvatarSystem() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–í–ê–¢–ê–†–û–í')
  console.log('================================\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase Storage
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase Storage...')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()
    
    if (bucketsError) {
      throw new Error(`Storage error: ${bucketsError.message}`)
    }
    
    const publicAssetsBucket = buckets.find(b => b.name === 'public-assets')
    if (publicAssetsBucket) {
      console.log('‚úÖ Bucket public-assets –Ω–∞–π–¥–µ–Ω')
    } else {
      console.log('‚ö†Ô∏è Bucket public-assets –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ui_layouts
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ui_layouts...')
    const { data: layoutsData, error: layoutsError } = await supabase
      .from('ui_layouts')
      .select('*')
      .limit(1)

    if (layoutsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ui_layouts:', layoutsError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ui_layouts –¥–æ—Å—Ç—É–ø–Ω–∞')
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${layoutsData?.length || 0}`)
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤...')
    const { data: files, error: filesError } = await supabase.storage
      .from('public-assets')
      .list('avatars', { limit: 10 })

    if (filesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤:', filesError.message)
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤: ${files?.length || 0}`)
      if (files && files.length > 0) {
        files.forEach(file => {
          console.log(`   üìÅ ${file.name} (${file.metadata?.size || 'unknown'} bytes)`)
        })
      }
    }

    // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö URL...')
    const testPath = 'avatars/test-user/avatar.png'
    const { data: urlData } = supabase.storage
      .from('public-assets')
      .getPublicUrl(testPath)
    
    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', urlData.publicUrl)

    // 5. –¢–µ—Å—Ç cache busting
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç cache busting...')
    const cacheBuster = Date.now()
    const urlWithCacheBuster = `${urlData.publicUrl}?v=${cacheBuster}`
    console.log('‚úÖ URL —Å cache busting:', urlWithCacheBuster)

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏...')
    const { data: usersWithAvatars, error: usersError } = await supabase
      .from('ui_layouts')
      .select('user_id, layout_config')
      .not('layout_config->avatarUrl', 'is', null)
      .limit(5)

    if (usersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message)
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏: ${usersWithAvatars?.length || 0}`)
      if (usersWithAvatars && usersWithAvatars.length > 0) {
        usersWithAvatars.forEach(user => {
          const avatarUrl = user.layout_config?.avatarUrl
          console.log(`   üë§ User: ${user.user_id.substring(0, 8)}... -> ${avatarUrl?.substring(0, 50)}...`)
        })
      }
    }

    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!')

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message)
    console.error('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  }
}

async function testAvatarUploadFlow() {
  console.log('\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–ê –ó–ê–ì–†–£–ó–ö–ò')
  console.log('=================================\n')

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 PNG)
    const testImageBlob = new Blob([
      new Uint8Array([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 dimensions
        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, // rest of IHDR
        0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
        0x08, 0xD7, 0x63, 0xF8, 0x0F, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x5C, 0xC2, 0xD2, 0x34, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND
      ])
    ], { type: 'image/png' })

    const testUserId = 'test-user-' + Date.now()
    const fileName = `avatars/${testUserId}/avatar.png`

    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä...')
    
    // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å upsert
    const { data, error } = await supabase.storage
      .from('public-assets')
      .upload(fileName, testImageBlob, {
        cacheControl: '300',
        upsert: true,
        contentType: 'image/png'
      })

    if (error) {
      throw new Error(`Upload error: ${error.message}`)
    }

    console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', data.path)

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
    const { data: urlData } = supabase.storage
      .from('public-assets')
      .getPublicUrl(fileName)

    const finalUrl = `${urlData.publicUrl}?v=${Date.now()}`
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π URL —Å cache busting:', finalUrl)

    // –û—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
    console.log('üßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...')
    await supabase.storage
      .from('public-assets')
      .remove([fileName])

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  await testAvatarSystem()
  await testAvatarUploadFlow()
  
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
  console.log('================')
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Developer Tools -> Console –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏')
  console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –≤ –¥–∏–∞–ª–æ–≥–µ —Å MOYO')
  console.log('3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+R)')
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Storage –≤ Supabase Dashboard')
}

runAllTests().catch(console.error) 